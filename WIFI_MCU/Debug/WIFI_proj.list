
WIFI_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001454  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800166c  0800166c  00011674  2**0
                  CONTENTS
  4 .ARM          00000000  0800166c  0800166c  00011674  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800166c  08001674  00011674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800166c  0800166c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000000  08001674  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001674  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011674  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005dcc  00000000  00000000  0001169d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000122d  00000000  00000000  00017469  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000330  00000000  00000000  00018698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b8  00000000  00000000  000189c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002dd7  00000000  00000000  00018c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000541e  00000000  00000000  0001ba57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a64a  00000000  00000000  00020e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002b4bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af8  00000000  00000000  0002b53c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800156c 	.word	0x0800156c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800156c 	.word	0x0800156c

08000170 <CAN_voidFilterConfiguration>:
									FILTER_MODE_t Filter_Mode,
									FILTER_SCALE_REGISTER_t Filter_Scale,
									FILTER_ASSIGNMENT_t Filter_Assignment,
									u32 Identifier_1, u32 Mask_Identifier_2,
									CAN_STATUS_t Activtion_status)
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]

	// enter filter initialization mode by setting FINIT bit
	SET_BIT(CAN1->CAN_FMR, FINIT_BIT);
 800018e:	4b35      	ldr	r3, [pc, #212]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000194:	4a33      	ldr	r2, [pc, #204]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000196:	f043 0301 	orr.w	r3, r3, #1
 800019a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	// set the mode of the filter bank
	// 0: Mask Mode 1: List Mode
	INS_BIT(CAN1->CAN_FM1R, Filter_Bank_number, Filter_Mode);
 800019e:	4b31      	ldr	r3, [pc, #196]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80001a4:	79fa      	ldrb	r2, [r7, #7]
 80001a6:	2101      	movs	r1, #1
 80001a8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ac:	43d2      	mvns	r2, r2
 80001ae:	4013      	ands	r3, r2
 80001b0:	79b9      	ldrb	r1, [r7, #6]
 80001b2:	79fa      	ldrb	r2, [r7, #7]
 80001b4:	fa01 f202 	lsl.w	r2, r1, r2
 80001b8:	4611      	mov	r1, r2
 80001ba:	4a2a      	ldr	r2, [pc, #168]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001bc:	430b      	orrs	r3, r1
 80001be:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	// set the Scale of the filter bank
	// 0: Dual 16-bit 1: Single 32-bit
	INS_BIT(CAN1->CAN_FS1R, Filter_Bank_number, Filter_Scale);
 80001c2:	4b28      	ldr	r3, [pc, #160]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80001c8:	79fa      	ldrb	r2, [r7, #7]
 80001ca:	2101      	movs	r1, #1
 80001cc:	fa01 f202 	lsl.w	r2, r1, r2
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	4013      	ands	r3, r2
 80001d4:	7979      	ldrb	r1, [r7, #5]
 80001d6:	79fa      	ldrb	r2, [r7, #7]
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	4611      	mov	r1, r2
 80001de:	4a21      	ldr	r2, [pc, #132]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001e0:	430b      	orrs	r3, r1
 80001e2:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

	// set the FIFO
	// 0: FIFO_0 1: FIFO_1
	INS_BIT(CAN1->CAN_FFA1R, Filter_Bank_number, Filter_Assignment);
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	2101      	movs	r1, #1
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4013      	ands	r3, r2
 80001f8:	7939      	ldrb	r1, [r7, #4]
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000200:	4611      	mov	r1, r2
 8000202:	4a18      	ldr	r2, [pc, #96]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000204:	430b      	orrs	r3, r1
 8000206:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	// assign identifiers Value
	CAN1->FILTER_BANK[Filter_Bank_number].FxR1 = Identifier_1;
 800020a:	4916      	ldr	r1, [pc, #88]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	3348      	adds	r3, #72	; 0x48
 8000210:	693a      	ldr	r2, [r7, #16]
 8000212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	CAN1->FILTER_BANK[Filter_Bank_number].FxR2 = Mask_Identifier_2;
 8000216:	4a13      	ldr	r2, [pc, #76]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	3348      	adds	r3, #72	; 0x48
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	4413      	add	r3, r2
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	605a      	str	r2, [r3, #4]

	// Activation Status
	INS_BIT(CAN1->CAN_FA1R, Filter_Bank_number, Activtion_status);
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000226:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800022a:	79fa      	ldrb	r2, [r7, #7]
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	4013      	ands	r3, r2
 8000236:	7e39      	ldrb	r1, [r7, #24]
 8000238:	79fa      	ldrb	r2, [r7, #7]
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000242:	430b      	orrs	r3, r1
 8000244:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	// enter Active Filter Mode mode by Clearing FINIT bit
	CLR_BIT(CAN1->CAN_FMR, FINIT_BIT);
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 800024a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800024e:	4a05      	ldr	r2, [pc, #20]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000250:	f023 0301 	bic.w	r3, r3, #1
 8000254:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bc90      	pop	{r4, r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40006400 	.word	0x40006400

08000268 <CAN_u32GetProperFilterValues>:
 take the values of filters and format them in the proper form
 used with 32-bit scale only
 ***************************************************/

u32 CAN_u32GetProperFilterValues(u16 std_id_part, u32 extended_id_part, u8 IDE_value, u8 RTR_value)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6039      	str	r1, [r7, #0]
 8000270:	4611      	mov	r1, r2
 8000272:	461a      	mov	r2, r3
 8000274:	4603      	mov	r3, r0
 8000276:	80fb      	strh	r3, [r7, #6]
 8000278:	460b      	mov	r3, r1
 800027a:	717b      	strb	r3, [r7, #5]
 800027c:	4613      	mov	r3, r2
 800027e:	713b      	strb	r3, [r7, #4]
	// byte 1              byte 2              byte 3          byte 4
	// stdid[10:3]  stdid[2:0] extid[17:13]  extid[12:5]   extid[4:0] IDE RTR  0

	u32 local = std_id_part << 21 | extended_id_part << 3 | IDE_value << 2
 8000280:	88fb      	ldrh	r3, [r7, #6]
 8000282:	055b      	lsls	r3, r3, #21
 8000284:	461a      	mov	r2, r3
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	00db      	lsls	r3, r3, #3
 800028a:	4313      	orrs	r3, r2
 800028c:	797a      	ldrb	r2, [r7, #5]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	4313      	orrs	r3, r2
			| RTR_value << 1;
 8000292:	793a      	ldrb	r2, [r7, #4]
 8000294:	0052      	lsls	r2, r2, #1
	u32 local = std_id_part << 21 | extended_id_part << 3 | IDE_value << 2
 8000296:	4313      	orrs	r3, r2
 8000298:	60fb      	str	r3, [r7, #12]
	return local;
 800029a:	68fb      	ldr	r3, [r7, #12]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
	...

080002a8 <CAN_voidInit>:
 and to set the bit timing
 --> if operating mode is not set to Normal at the end of this function use it explicitly
 *****************************************************************/

void CAN_voidInit(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	// concatenate the values in the configuration file
	// corresponding to the MCR_register "CAN master Control"
	u32 value = CONC_MCR(CAN_TIME_TRIGGERED_COMMUNICATION_MODE,
 80002ae:	2307      	movs	r3, #7
 80002b0:	607b      	str	r3, [r7, #4]
			CAN_WAKE_UP_MANAGMENT,
			CAN_NO_RETRANSMISSION,
			CAN_RECEIVE_FIFO_LOCKED_MODE,
			CAN_TRANSMIT_FIFO_PRIORITY);

	CAN1->CAN_MCR = (CAN_WORKING_IN_DEBUG << 16) | (value << 2);
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <CAN_voidInit+0x44>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	6013      	str	r3, [r2, #0]

	// enter initialization mode to be able to set the bit timings
	CAN_voidOperatingMode(CAN_OPERATING_MODE_INITIALIZATION);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f000 f818 	bl	80002f0 <CAN_voidOperatingMode>

	// set the bit timing
	CAN_voidSetTiming();
 80002c0:	f000 f87e 	bl	80003c0 <CAN_voidSetTiming>

	// test mode if used
	INS_BIT(CAN1->CAN_BTR, LBKM_BIT, CAN_LOOPBACK_MODE);
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <CAN_voidInit+0x44>)
 80002c6:	69db      	ldr	r3, [r3, #28]
 80002c8:	4a08      	ldr	r2, [pc, #32]	; (80002ec <CAN_voidInit+0x44>)
 80002ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002ce:	61d3      	str	r3, [r2, #28]
	INS_BIT(CAN1->CAN_BTR, SILM_BIT, CAN_SILENT_MODE);
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <CAN_voidInit+0x44>)
 80002d2:	69db      	ldr	r3, [r3, #28]
 80002d4:	4a05      	ldr	r2, [pc, #20]	; (80002ec <CAN_voidInit+0x44>)
 80002d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80002da:	61d3      	str	r3, [r2, #28]

	CAN_voidOperatingMode(CAN_OPERATING_MODE_NORMAL);
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 f807 	bl	80002f0 <CAN_voidOperatingMode>

}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40006400 	.word	0x40006400

080002f0 <CAN_voidOperatingMode>:
/********************************************************
 * Choose the operating mode for the can
 * then wait for the hardware to ack
 *******************************************************/
void CAN_voidOperatingMode(CAN_OPERATING_MODE_t Operating_Mode)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	switch (Operating_Mode)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d020      	beq.n	8000342 <CAN_voidOperatingMode+0x52>
 8000300:	2b02      	cmp	r3, #2
 8000302:	d03a      	beq.n	800037a <CAN_voidOperatingMode+0x8a>
 8000304:	2b00      	cmp	r3, #0
 8000306:	d000      	beq.n	800030a <CAN_voidOperatingMode+0x1a>
			// wait for hardware to ack
			while (GET_BIT(CAN1->CAN_MSR, INRQ_BIT)); // wait till zero
			while (GET_BIT(CAN1->CAN_MSR,SLEEP_BIT) == 0); // wait till one
			break;
	}
}
 8000308:	e053      	b.n	80003b2 <CAN_voidOperatingMode+0xc2>
			CLR_BIT(CAN1->CAN_MCR, INRQ_BIT);
 800030a:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000310:	f023 0301 	bic.w	r3, r3, #1
 8000314:	6013      	str	r3, [r2, #0]
			CLR_BIT(CAN1->CAN_MCR, SLEEP_BIT);
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a28      	ldr	r2, [pc, #160]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800031c:	f023 0302 	bic.w	r3, r3, #2
 8000320:	6013      	str	r3, [r2, #0]
			while (GET_BIT(CAN1->CAN_MSR, INRQ_BIT)); // wait till zero
 8000322:	bf00      	nop
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d1f9      	bne.n	8000324 <CAN_voidOperatingMode+0x34>
			while (GET_BIT(CAN1->CAN_MSR, SLEEP_BIT)); // wait till zero
 8000330:	bf00      	nop
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	085b      	lsrs	r3, r3, #1
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f8      	bne.n	8000332 <CAN_voidOperatingMode+0x42>
			break;
 8000340:	e037      	b.n	80003b2 <CAN_voidOperatingMode+0xc2>
			SET_BIT(CAN1->CAN_MCR, INRQ_BIT);
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6013      	str	r3, [r2, #0]
			CLR_BIT(CAN1->CAN_MCR, SLEEP_BIT);
 800034e:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000354:	f023 0302 	bic.w	r3, r3, #2
 8000358:	6013      	str	r3, [r2, #0]
			while (GET_BIT(CAN1->CAN_MSR,INRQ_BIT) == 0); // wait till one
 800035a:	bf00      	nop
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <CAN_voidOperatingMode+0x6c>
			while (GET_BIT(CAN1->CAN_MSR, SLEEP_BIT)); // wait till zero
 8000368:	bf00      	nop
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	085b      	lsrs	r3, r3, #1
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1f8      	bne.n	800036a <CAN_voidOperatingMode+0x7a>
			break;
 8000378:	e01b      	b.n	80003b2 <CAN_voidOperatingMode+0xc2>
			CLR_BIT(CAN1->CAN_MCR, INRQ_BIT);
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]
			SET_BIT(CAN1->CAN_MCR, SLEEP_BIT);
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	6013      	str	r3, [r2, #0]
			while (GET_BIT(CAN1->CAN_MSR, INRQ_BIT)); // wait till zero
 8000392:	bf00      	nop
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d1f9      	bne.n	8000394 <CAN_voidOperatingMode+0xa4>
			while (GET_BIT(CAN1->CAN_MSR,SLEEP_BIT) == 0); // wait till one
 80003a0:	bf00      	nop
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	085b      	lsrs	r3, r3, #1
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f8      	beq.n	80003a2 <CAN_voidOperatingMode+0xb2>
			break;
 80003b0:	bf00      	nop
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40006400 	.word	0x40006400

080003c0 <CAN_voidSetTiming>:

static void CAN_voidSetTiming(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	// set the value of the baudrate which is used to determine
	// the time quanta
	// field start at bit 0 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0x3FF, 0, CAN_BAUD_RATE_PRESCALER);
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80003cc:	f023 0303 	bic.w	r3, r3, #3
 80003d0:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	61d3      	str	r3, [r2, #28]

	// number of time segment 1 which is a multiple of time quanta
	// field start at bit 16 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0xF, 16, CAN_TIME_SIGMENT_1);
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003e2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80003e6:	61d3      	str	r3, [r2, #28]

	// number of time segment 2 which is a multiple of time quanta
	// field start at bit 20 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0x7, 20, CAN_TIME_SIGMENT_2);
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003f6:	61d3      	str	r3, [r2, #28]

	// maximum number of time quanta the CAN hardware is allowed to
	// lengthen or shorten a bit to perform the resynchronization.
	// field start at bit 24 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0x3, 24, CAN_RESYNC_JUMP_WIDTH);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	f023 5398 	bic.w	r3, r3, #318767104	; 0x13000000
 8000400:	4a03      	ldr	r2, [pc, #12]	; (8000410 <CAN_voidSetTiming+0x50>)
 8000402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000406:	61d3      	str	r3, [r2, #28]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40006400 	.word	0x40006400

08000414 <CAN_voidInterruptStatus>:

/*****************************************
 Activate the required event interrupt
 *****************************************/
void CAN_voidInterruptStatus(CAN_INERRUPT_EVENTS_t Event, CAN_STATUS_t Status)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]
	INS_BIT(CAN1->CAN_IER, Event, Status);
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <CAN_voidInterruptStatus+0x3c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	43d2      	mvns	r2, r2
 8000432:	4013      	ands	r3, r2
 8000434:	79b9      	ldrb	r1, [r7, #6]
 8000436:	79fa      	ldrb	r2, [r7, #7]
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	4611      	mov	r1, r2
 800043e:	4a04      	ldr	r2, [pc, #16]	; (8000450 <CAN_voidInterruptStatus+0x3c>)
 8000440:	430b      	orrs	r3, r1
 8000442:	6153      	str	r3, [r2, #20]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40006400 	.word	0x40006400

08000454 <StringLen>:

/****************************************************************
 * Instead of including String.h library
 *****************************************************************/
static u8 StringLen(u8 *str)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	u8 counter = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	73fb      	strb	r3, [r7, #15]
	while (*str++ != '\0')
 8000460:	e002      	b.n	8000468 <StringLen+0x14>
	{
		counter++;
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	3301      	adds	r3, #1
 8000466:	73fb      	strb	r3, [r7, #15]
	while (*str++ != '\0')
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	1c5a      	adds	r2, r3, #1
 800046c:	607a      	str	r2, [r7, #4]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1f6      	bne.n	8000462 <StringLen+0xe>
	}
	return counter;
 8000474:	7bfb      	ldrb	r3, [r7, #15]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <CAN_TransmitStringTest>:

void CAN_TransmitStringTest(u8 MailBoxNum, u8 *Data, u32 identifier)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	73fb      	strb	r3, [r7, #15]
//	-------------------------------------------------------------------------------
	// byte 1              byte 2              byte 3          byte 4
	// stdid[10:3]  stdid[2:0] extid[17:13]  extid[12:5]   extid[4:0] IDE RTR  TXRQ
//  -------------------------------------------------------------------------------

	u8 temp_index = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	75fb      	strb	r3, [r7, #23]
	u8 Strlength = StringLen(Data);
 8000492:	68b8      	ldr	r0, [r7, #8]
 8000494:	f7ff ffde 	bl	8000454 <StringLen>
 8000498:	4603      	mov	r3, r0
 800049a:	75bb      	strb	r3, [r7, #22]
	while (temp_index < Strlength)
 800049c:	e077      	b.n	800058e <CAN_TransmitStringTest+0x10e>
	{
		// wait for the required transmitting mail box to be empty
		while ( GET_BIT(CAN1->CAN_TSR,(26+MailBoxNum) ) == 0);
 800049e:	bf00      	nop
 80004a0:	4b3f      	ldr	r3, [pc, #252]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 80004a2:	689a      	ldr	r2, [r3, #8]
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	331a      	adds	r3, #26
 80004a8:	fa22 f303 	lsr.w	r3, r2, r3
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f5      	beq.n	80004a0 <CAN_TransmitStringTest+0x20>

		// must use the identifier format function to avoid any errors
		CAN1->TX_MAILBOX[MailBoxNum].CAN_TIR = identifier;
 80004b4:	4a3a      	ldr	r2, [pc, #232]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	3318      	adds	r3, #24
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	4413      	add	r3, r2
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	601a      	str	r2, [r3, #0]

		// length of the data to be sent
		INS_FIELD(CAN1->TX_MAILBOX[MailBoxNum].CAN_TDTR, 0xF, 0, 8);
 80004c2:	4a37      	ldr	r2, [pc, #220]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	3318      	adds	r3, #24
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	4413      	add	r3, r2
 80004cc:	3304      	adds	r3, #4
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f023 020f 	bic.w	r2, r3, #15
 80004d4:	4932      	ldr	r1, [pc, #200]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	f042 0208 	orr.w	r2, r2, #8
 80004dc:	3318      	adds	r3, #24
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	440b      	add	r3, r1
 80004e2:	3304      	adds	r3, #4
 80004e4:	601a      	str	r2, [r3, #0]

		// lower 4 bytes of data
		CAN1->TX_MAILBOX[MailBoxNum].CAN_TDLR = Data[temp_index + 3] << 24
 80004e6:	7dfb      	ldrb	r3, [r7, #23]
 80004e8:	3303      	adds	r3, #3
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	061a      	lsls	r2, r3, #24
				| Data[temp_index + 2] << 16
 80004f2:	7dfb      	ldrb	r3, [r7, #23]
 80004f4:	3302      	adds	r3, #2
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	440b      	add	r3, r1
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	041b      	lsls	r3, r3, #16
 80004fe:	431a      	orrs	r2, r3
				| Data[temp_index + 1] << 8 | Data[temp_index + 0];
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	3301      	adds	r3, #1
 8000504:	68b9      	ldr	r1, [r7, #8]
 8000506:	440b      	add	r3, r1
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	021b      	lsls	r3, r3, #8
 800050c:	4313      	orrs	r3, r2
 800050e:	7dfa      	ldrb	r2, [r7, #23]
 8000510:	68b9      	ldr	r1, [r7, #8]
 8000512:	440a      	add	r2, r1
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	ea43 0102 	orr.w	r1, r3, r2
		CAN1->TX_MAILBOX[MailBoxNum].CAN_TDLR = Data[temp_index + 3] << 24
 800051a:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	4413      	add	r3, r2
 8000522:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000526:	6019      	str	r1, [r3, #0]

		// higher 4 bytes of data
		CAN1->TX_MAILBOX[MailBoxNum].CAN_TDHR = Data[temp_index + 7] << 24
 8000528:	7dfb      	ldrb	r3, [r7, #23]
 800052a:	3307      	adds	r3, #7
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	061a      	lsls	r2, r3, #24
				| Data[temp_index + 6] << 16
 8000534:	7dfb      	ldrb	r3, [r7, #23]
 8000536:	3306      	adds	r3, #6
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	440b      	add	r3, r1
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	041b      	lsls	r3, r3, #16
 8000540:	431a      	orrs	r2, r3
				| Data[temp_index + 5] << 8 | Data[temp_index + 4];
 8000542:	7dfb      	ldrb	r3, [r7, #23]
 8000544:	3305      	adds	r3, #5
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	440b      	add	r3, r1
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	4313      	orrs	r3, r2
 8000550:	7dfa      	ldrb	r2, [r7, #23]
 8000552:	3204      	adds	r2, #4
 8000554:	68b9      	ldr	r1, [r7, #8]
 8000556:	440a      	add	r2, r1
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	ea43 0102 	orr.w	r1, r3, r2
		CAN1->TX_MAILBOX[MailBoxNum].CAN_TDHR = Data[temp_index + 7] << 24
 800055e:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	4413      	add	r3, r2
 8000566:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800056a:	6019      	str	r1, [r3, #0]

		// request transmitting
		SET_BIT(CAN1->TX_MAILBOX[MailBoxNum].CAN_TIR, 0);
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	3318      	adds	r3, #24
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	4413      	add	r3, r2
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4909      	ldr	r1, [pc, #36]	; (80005a0 <CAN_TransmitStringTest+0x120>)
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f042 0201 	orr.w	r2, r2, #1
 8000580:	3318      	adds	r3, #24
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	440b      	add	r3, r1
 8000586:	601a      	str	r2, [r3, #0]
		temp_index += 8;
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	3308      	adds	r3, #8
 800058c:	75fb      	strb	r3, [r7, #23]
	while (temp_index < Strlength)
 800058e:	7dfa      	ldrb	r2, [r7, #23]
 8000590:	7dbb      	ldrb	r3, [r7, #22]
 8000592:	429a      	cmp	r2, r3
 8000594:	d383      	bcc.n	800049e <CAN_TransmitStringTest+0x1e>
	}
}
 8000596:	bf00      	nop
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40006400 	.word	0x40006400

080005a4 <CAN_u8ReceiveStringTest>:

u8 CAN_u8ReceiveStringTest(u8 FIFO_num, RX_Struct_t *RX_Header, CAN_STRING_Buffer_t *Rx_Buffer, char Delimiter)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b08b      	sub	sp, #44	; 0x2c
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	4613      	mov	r3, r2
 80005b6:	73bb      	strb	r3, [r7, #14]

	u8 DoesDelimiterCame = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// get the length of the incoming data
	RX_Header->Data_length = CAN1->RX_MAILBOX[FIFO_num].CAN_RDTR & 0xF;
 80005be:	4a4b      	ldr	r2, [pc, #300]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	331b      	adds	r3, #27
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	4413      	add	r3, r2
 80005c8:	3304      	adds	r3, #4
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f003 030f 	and.w	r3, r3, #15
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	701a      	strb	r2, [r3, #0]

	// get the identifier type
	RX_Header->Identifier_type = GET_BIT(CAN1->RX_MAILBOX[FIFO_num].CAN_RIR, 2);
 80005d8:	4a44      	ldr	r2, [pc, #272]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	331b      	adds	r3, #27
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	4413      	add	r3, r2
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	721a      	strb	r2, [r3, #8]

	u32 local_extarcted_std_id = (CAN1->RX_MAILBOX[FIFO_num].CAN_RIR >> 21)
 80005f2:	4a3e      	ldr	r2, [pc, #248]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	331b      	adds	r3, #27
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	4413      	add	r3, r2
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	0d5b      	lsrs	r3, r3, #21
 8000600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000604:	61bb      	str	r3, [r7, #24]
			& 0x7FF;	// needs only 11-bit
	u32 local_extarcted_extended_id = (CAN1->RX_MAILBOX[FIFO_num].CAN_RIR >> 3)
 8000606:	4a39      	ldr	r2, [pc, #228]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	331b      	adds	r3, #27
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	4413      	add	r3, r2
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	08db      	lsrs	r3, r3, #3
 8000614:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000618:	617b      	str	r3, [r7, #20]
			& 0x3FFFF;	// needs only 18-bit

	if (RX_Header->Identifier_type) //standard
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	7a1b      	ldrb	r3, [r3, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <CAN_u8ReceiveStringTest+0x86>
	{
		RX_Header->Identifier = local_extarcted_std_id;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	69ba      	ldr	r2, [r7, #24]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	e005      	b.n	8000636 <CAN_u8ReceiveStringTest+0x92>
	}
	else // extended
	{
		RX_Header->Identifier = (local_extarcted_std_id << 18)
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	049a      	lsls	r2, r3, #18
				| local_extarcted_extended_id;
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	431a      	orrs	r2, r3
		RX_Header->Identifier = (local_extarcted_std_id << 18)
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	605a      	str	r2, [r3, #4]
	}

	// index of the filter data passed through
	RX_Header->Filter_Index = (CAN1->RX_MAILBOX[FIFO_num].CAN_RDTR) >> 8 & 0xFF;
 8000636:	4a2d      	ldr	r2, [pc, #180]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	331b      	adds	r3, #27
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	4413      	add	r3, r2
 8000640:	3304      	adds	r3, #4
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	b2da      	uxtb	r2, r3
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	729a      	strb	r2, [r3, #10]

	// get the frame type remote or data
	RX_Header->Frame_type = GET_BIT(CAN1->RX_MAILBOX[FIFO_num].CAN_RIR, 1);
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	331b      	adds	r3, #27
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	4413      	add	r3, r2
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	085b      	lsrs	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	725a      	strb	r2, [r3, #9]

	u8 *data_start_add = (u8*) &(CAN1->RX_MAILBOX[FIFO_num].CAN_RDLR);
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	f103 0208 	add.w	r2, r3, #8
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <CAN_u8ReceiveStringTest+0x14c>)
 8000670:	4413      	add	r3, r2
 8000672:	623b      	str	r3, [r7, #32]
	u8 dumb;

	// read data and save it in buffer until the delimiter is received
	for (int i = 0; i < RX_Header->Data_length; i++)
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
 8000678:	e01b      	b.n	80006b2 <CAN_u8ReceiveStringTest+0x10e>
	{

		dumb = *data_start_add++;
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	623a      	str	r2, [r7, #32]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	74fb      	strb	r3, [r7, #19]
		Rx_Buffer->Buffer[Rx_Buffer->counter++] = dumb;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	b2d1      	uxtb	r1, r2
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
 8000694:	4619      	mov	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7cfa      	ldrb	r2, [r7, #19]
 800069a:	545a      	strb	r2, [r3, r1]

		if (dumb == Delimiter)
 800069c:	7cfa      	ldrb	r2, [r7, #19]
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d103      	bne.n	80006ac <CAN_u8ReceiveStringTest+0x108>
		{

			DoesDelimiterCame = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80006aa:	e008      	b.n	80006be <CAN_u8ReceiveStringTest+0x11a>
	for (int i = 0; i < RX_Header->Data_length; i++)
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	3301      	adds	r3, #1
 80006b0:	61fb      	str	r3, [r7, #28]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	dbdd      	blt.n	800067a <CAN_u8ReceiveStringTest+0xd6>
	}

	// when the delimiter is received
	// return 1 to be checked on

	if (FIFO_num)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d006      	beq.n	80006d2 <CAN_u8ReceiveStringTest+0x12e>
	{
		SET_BIT(CAN1->CAN_RF1R, 5);
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6113      	str	r3, [r2, #16]
 80006d0:	e005      	b.n	80006de <CAN_u8ReceiveStringTest+0x13a>
	}
	else
	{
		SET_BIT(CAN1->CAN_RF0R, 5);
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <CAN_u8ReceiveStringTest+0x148>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	60d3      	str	r3, [r2, #12]
	}

	return DoesDelimiterCame;
 80006de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 80006e2:	4618      	mov	r0, r3
 80006e4:	372c      	adds	r7, #44	; 0x2c
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40006400 	.word	0x40006400
 80006f0:	400065b0 	.word	0x400065b0

080006f4 <CAN_voidSetCallBack>:

void (*CAN_PtrToFunc)(void)=NULL;

void CAN_voidSetCallBack(void (*ptr2func)(void))
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	CAN_PtrToFunc=ptr2func;
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <CAN_voidSetCallBack+0x18>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	2000001c 	.word	0x2000001c

08000710 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler(void) // for record
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	CAN_PtrToFunc();
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <CAN_RX1_IRQHandler+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4798      	blx	r3


}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000001c 	.word	0x2000001c

08000724 <MUSART_CallBack>:
#include "../../include/MCAL/SYSTICK/SYSTICK_interface.h"

u8 volatile Iterator = 0  ;
u8 volatile DataCome[100] ;

void MUSART_CallBack ( void ){
 8000724:	b598      	push	{r3, r4, r7, lr}
 8000726:	af00      	add	r7, sp, #0

	/* Receive ESP8266 Response */
	DataCome[ Iterator ] = MUSART1_u8ReadDataRegister();
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MUSART_CallBack+0x2c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461c      	mov	r4, r3
 8000730:	f000 fd9c 	bl	800126c <MUSART1_u8ReadDataRegister>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MUSART_CallBack+0x30>)
 800073a:	551a      	strb	r2, [r3, r4]
	/* ------------------ */
	Iterator++;
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <MUSART_CallBack+0x2c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b02      	ldr	r3, [pc, #8]	; (8000750 <MUSART_CallBack+0x2c>)
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	bd98      	pop	{r3, r4, r7, pc}
 800074e:	bf00      	nop
 8000750:	20000020 	.word	0x20000020
 8000754:	20000030 	.word	0x20000030

08000758 <ESP8266_VidInit>:

void ESP8266_VidInit ( void ){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	/* Set USART1 CallBack To Receive The Response Of The ESP8266 */
	MUSART1_VidSetCallBack( MUSART_CallBack );
 800075c:	480e      	ldr	r0, [pc, #56]	; (8000798 <ESP8266_VidInit+0x40>)
 800075e:	f000 fd99 	bl	8001294 <MUSART1_VidSetCallBack>

	/* Sending AT Command To Check ESP8266 Is Working Or Not  */
	MUSART1_VidSendStringSynch( (u8 *)"AT\r\n" );
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <ESP8266_VidInit+0x44>)
 8000764:	f000 fd5a 	bl	800121c <MUSART1_VidSendStringSynch>

	MSYSTICK_voidDelay_ms( 3000 );
 8000768:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800076c:	f000 fc8a 	bl	8001084 <MSYSTICK_voidDelay_ms>

	/* Clear ESP8266 Buffer */
	ESP8266_VidClearBuffer();
 8000770:	f000 f88a 	bl	8000888 <ESP8266_VidClearBuffer>

	MUSART1_VidSendStringSynch( (u8 *)"AT+CWMODE=3\r\n" );
 8000774:	480a      	ldr	r0, [pc, #40]	; (80007a0 <ESP8266_VidInit+0x48>)
 8000776:	f000 fd51 	bl	800121c <MUSART1_VidSendStringSynch>
	MSYSTICK_voidDelay_ms( 1000 );
 800077a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077e:	f000 fc81 	bl	8001084 <MSYSTICK_voidDelay_ms>

	ESP8266_VidClearBuffer();
 8000782:	f000 f881 	bl	8000888 <ESP8266_VidClearBuffer>

	MUSART1_VidSendStringSynch( (u8 *)"AT+CIPMODE=0\r\n" );
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <ESP8266_VidInit+0x4c>)
 8000788:	f000 fd48 	bl	800121c <MUSART1_VidSendStringSynch>
	MSYSTICK_voidDelay_ms( 1000 );
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f000 fc78 	bl	8001084 <MSYSTICK_voidDelay_ms>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	08000725 	.word	0x08000725
 800079c:	08001584 	.word	0x08001584
 80007a0:	0800158c 	.word	0x0800158c
 80007a4:	0800159c 	.word	0x0800159c

080007a8 <ESP8266_VidConnectToWiFi>:

void ESP8266_VidConnectToWiFi ( u8 * SSID , u8 * Password ){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]

	ESP8266_VidClearBuffer();
 80007b2:	f000 f869 	bl	8000888 <ESP8266_VidClearBuffer>

	MUSART1_VidSendStringSynch( (u8 *) "AT+CWJAP=\"" );
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <ESP8266_VidConnectToWiFi+0x3c>)
 80007b8:	f000 fd30 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) SSID );
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 fd2d 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) "\",\"" );
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <ESP8266_VidConnectToWiFi+0x40>)
 80007c4:	f000 fd2a 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) Password);
 80007c8:	6838      	ldr	r0, [r7, #0]
 80007ca:	f000 fd27 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) "\"\r\n");
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <ESP8266_VidConnectToWiFi+0x44>)
 80007d0:	f000 fd24 	bl	800121c <MUSART1_VidSendStringSynch>
	MSYSTICK_voidDelay_ms( 6000 );
 80007d4:	f241 7070 	movw	r0, #6000	; 0x1770
 80007d8:	f000 fc54 	bl	8001084 <MSYSTICK_voidDelay_ms>

}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	080015ac 	.word	0x080015ac
 80007e8:	080015b8 	.word	0x080015b8
 80007ec:	080015bc 	.word	0x080015bc

080007f0 <ESP8266_VidConnectToSrvTcp>:


void ESP8266_VidConnectToSrvTcp ( u8 * Copy_u8Domain , u8 * Copy_u8Port ){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]

	ESP8266_VidClearBuffer();
 80007fa:	f000 f845 	bl	8000888 <ESP8266_VidClearBuffer>

	MUSART1_VidSendStringSynch( (u8 *) "AT+CIPSTART=\"TCP\",\"" );
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <ESP8266_VidConnectToSrvTcp+0x3c>)
 8000800:	f000 fd0c 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) Copy_u8Domain );
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 fd09 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) "\"," );
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <ESP8266_VidConnectToSrvTcp+0x40>)
 800080c:	f000 fd06 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) Copy_u8Port );
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f000 fd03 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) "\r\n" );
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <ESP8266_VidConnectToSrvTcp+0x44>)
 8000818:	f000 fd00 	bl	800121c <MUSART1_VidSendStringSynch>
	MSYSTICK_voidDelay_ms( 1000 );
 800081c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000820:	f000 fc30 	bl	8001084 <MSYSTICK_voidDelay_ms>

}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	080015c0 	.word	0x080015c0
 8000830:	080015d4 	.word	0x080015d4
 8000834:	080015d8 	.word	0x080015d8

08000838 <ESP8266_PTRu8SocketSendData>:
	return  DataCome[85] ;

}

u8* ESP8266_PTRu8SocketSendData(u8 * copy_u8DataToSend,u8 * Copy_u8Length)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	ESP8266_VidClearBuffer();
 8000842:	f000 f821 	bl	8000888 <ESP8266_VidClearBuffer>

	MUSART1_VidSendStringSynch( (u8 *) "AT+CIPSEND=" );
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <ESP8266_PTRu8SocketSendData+0x44>)
 8000848:	f000 fce8 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) Copy_u8Length );
 800084c:	6838      	ldr	r0, [r7, #0]
 800084e:	f000 fce5 	bl	800121c <MUSART1_VidSendStringSynch>
	MUSART1_VidSendStringSynch( (u8 *) "\r\n" );
 8000852:	480b      	ldr	r0, [pc, #44]	; (8000880 <ESP8266_PTRu8SocketSendData+0x48>)
 8000854:	f000 fce2 	bl	800121c <MUSART1_VidSendStringSynch>
	MSYSTICK_voidDelay_ms( 500 );
 8000858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085c:	f000 fc12 	bl	8001084 <MSYSTICK_voidDelay_ms>
	ESP8266_VidClearBuffer();
 8000860:	f000 f812 	bl	8000888 <ESP8266_VidClearBuffer>

	MUSART1_VidSendStringSynch( (u8 *) copy_u8DataToSend);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 fcd9 	bl	800121c <MUSART1_VidSendStringSynch>
	MSYSTICK_voidDelay_ms( 2000 );
 800086a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800086e:	f000 fc09 	bl	8001084 <MSYSTICK_voidDelay_ms>

	return DataCome;
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <ESP8266_PTRu8SocketSendData+0x4c>)
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	080015dc 	.word	0x080015dc
 8000880:	080015d8 	.word	0x080015d8
 8000884:	20000030 	.word	0x20000030

08000888 <ESP8266_VidClearBuffer>:


void ESP8266_VidClearBuffer ( void ){
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

	u8 LOC_u8Iterator1 = 0 ;
 800088e:	2300      	movs	r3, #0
 8000890:	71fb      	strb	r3, [r7, #7]
	Iterator     = 0 ;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <ESP8266_VidClearBuffer+0x34>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]

	for( LOC_u8Iterator1 = 0 ; LOC_u8Iterator1 < 100 ; LOC_u8Iterator1++ ){
 8000898:	2300      	movs	r3, #0
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	e006      	b.n	80008ac <ESP8266_VidClearBuffer+0x24>

		DataCome[ LOC_u8Iterator1 ] = 0 ;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <ESP8266_VidClearBuffer+0x38>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	54d1      	strb	r1, [r2, r3]
	for( LOC_u8Iterator1 = 0 ; LOC_u8Iterator1 < 100 ; LOC_u8Iterator1++ ){
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3301      	adds	r3, #1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b63      	cmp	r3, #99	; 0x63
 80008b0:	d9f5      	bls.n	800089e <ESP8266_VidClearBuffer+0x16>

	}

}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000020 	.word	0x20000020
 80008c0:	20000030 	.word	0x20000030

080008c4 <MGPIO_voidSetDirection>:
 * I/P parms: copy_u8PortNumber , copy_u8PinNumber , copy_u8Mode , copy_u8CNF
 * return: None
 * DESC: this function Set the direction of a GPIO-PIN.
 * *******************************************************************************/
void MGPIO_voidSetDirection(u8 copy_u8PortNumber, u8 copy_u8PinNumber,u8 copy_u8Mode,u8 copy_u8CNF)
{
 80008c4:	b490      	push	{r4, r7}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	4623      	mov	r3, r4
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	4603      	mov	r3, r0
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	460b      	mov	r3, r1
 80008dc:	717b      	strb	r3, [r7, #5]
 80008de:	4613      	mov	r3, r2
 80008e0:	713b      	strb	r3, [r7, #4]
	switch(copy_u8PortNumber)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d05b      	beq.n	80009a0 <MGPIO_voidSetDirection+0xdc>
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	f000 80ad 	beq.w	8000a48 <MGPIO_voidSetDirection+0x184>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d000      	beq.n	80008f4 <MGPIO_voidSetDirection+0x30>
		}
		break;

	}

}
 80008f2:	e0db      	b.n	8000aac <MGPIO_voidSetDirection+0x1e8>
		if (copy_u8PinNumber <= 7)
 80008f4:	79bb      	ldrb	r3, [r7, #6]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	d823      	bhi.n	8000942 <MGPIO_voidSetDirection+0x7e>
			GPIO_PORTA_REG->CRL &= ~(15<< (4 * copy_u8PinNumber));
 80008fa:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	79ba      	ldrb	r2, [r7, #6]
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	210f      	movs	r1, #15
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	43d2      	mvns	r2, r2
 800090a:	4611      	mov	r1, r2
 800090c:	4a6a      	ldr	r2, [pc, #424]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 800090e:	400b      	ands	r3, r1
 8000910:	6013      	str	r3, [r2, #0]
			GPIO_PORTA_REG->CRL |= (copy_u8Mode << (4 * copy_u8PinNumber));
 8000912:	4b69      	ldr	r3, [pc, #420]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	7979      	ldrb	r1, [r7, #5]
 8000918:	79ba      	ldrb	r2, [r7, #6]
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	fa01 f202 	lsl.w	r2, r1, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4a65      	ldr	r2, [pc, #404]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 8000924:	430b      	orrs	r3, r1
 8000926:	6013      	str	r3, [r2, #0]
			GPIO_PORTA_REG->CRL |= (copy_u8CNF << ((4 * copy_u8PinNumber) + 2));
 8000928:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	7939      	ldrb	r1, [r7, #4]
 800092e:	79ba      	ldrb	r2, [r7, #6]
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	3202      	adds	r2, #2
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	4611      	mov	r1, r2
 800093a:	4a5f      	ldr	r2, [pc, #380]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 800093c:	430b      	orrs	r3, r1
 800093e:	6013      	str	r3, [r2, #0]
		break;
 8000940:	e0af      	b.n	8000aa2 <MGPIO_voidSetDirection+0x1de>
		else if (copy_u8PinNumber >= 8 && copy_u8PinNumber <= 15)
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	2b07      	cmp	r3, #7
 8000946:	f240 80ac 	bls.w	8000aa2 <MGPIO_voidSetDirection+0x1de>
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	f200 80a8 	bhi.w	8000aa2 <MGPIO_voidSetDirection+0x1de>
			copy_u8PinNumber -= 8;
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	3b08      	subs	r3, #8
 8000956:	71bb      	strb	r3, [r7, #6]
			GPIO_PORTA_REG->CRH &= ~(15<< (4 * copy_u8PinNumber));
 8000958:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	79ba      	ldrb	r2, [r7, #6]
 800095e:	0092      	lsls	r2, r2, #2
 8000960:	210f      	movs	r1, #15
 8000962:	fa01 f202 	lsl.w	r2, r1, r2
 8000966:	43d2      	mvns	r2, r2
 8000968:	4611      	mov	r1, r2
 800096a:	4a53      	ldr	r2, [pc, #332]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 800096c:	400b      	ands	r3, r1
 800096e:	6053      	str	r3, [r2, #4]
			GPIO_PORTA_REG->CRH |= (copy_u8Mode << (4 * copy_u8PinNumber));
 8000970:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	7979      	ldrb	r1, [r7, #5]
 8000976:	79ba      	ldrb	r2, [r7, #6]
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	4611      	mov	r1, r2
 8000980:	4a4d      	ldr	r2, [pc, #308]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 8000982:	430b      	orrs	r3, r1
 8000984:	6053      	str	r3, [r2, #4]
			GPIO_PORTA_REG->CRH |= (copy_u8CNF << ((4 * copy_u8PinNumber) + 2));
 8000986:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	7939      	ldrb	r1, [r7, #4]
 800098c:	79ba      	ldrb	r2, [r7, #6]
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	3202      	adds	r2, #2
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	4611      	mov	r1, r2
 8000998:	4a47      	ldr	r2, [pc, #284]	; (8000ab8 <MGPIO_voidSetDirection+0x1f4>)
 800099a:	430b      	orrs	r3, r1
 800099c:	6053      	str	r3, [r2, #4]
		break;
 800099e:	e080      	b.n	8000aa2 <MGPIO_voidSetDirection+0x1de>
		if (copy_u8PinNumber <= 7)
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	d823      	bhi.n	80009ee <MGPIO_voidSetDirection+0x12a>
			GPIO_PORTB_REG->CRL &= ~(15<< (4 * copy_u8PinNumber));
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	210f      	movs	r1, #15
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	4611      	mov	r1, r2
 80009b8:	4a40      	ldr	r2, [pc, #256]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 80009ba:	400b      	ands	r3, r1
 80009bc:	6013      	str	r3, [r2, #0]
			GPIO_PORTB_REG->CRL |= (copy_u8Mode << (4 * copy_u8PinNumber));
 80009be:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	7979      	ldrb	r1, [r7, #5]
 80009c4:	79ba      	ldrb	r2, [r7, #6]
 80009c6:	0092      	lsls	r2, r2, #2
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	4611      	mov	r1, r2
 80009ce:	4a3b      	ldr	r2, [pc, #236]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 80009d0:	430b      	orrs	r3, r1
 80009d2:	6013      	str	r3, [r2, #0]
			GPIO_PORTB_REG->CRL |= (copy_u8CNF << ((4 * copy_u8PinNumber) + 2));
 80009d4:	4b39      	ldr	r3, [pc, #228]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7939      	ldrb	r1, [r7, #4]
 80009da:	79ba      	ldrb	r2, [r7, #6]
 80009dc:	0092      	lsls	r2, r2, #2
 80009de:	3202      	adds	r2, #2
 80009e0:	fa01 f202 	lsl.w	r2, r1, r2
 80009e4:	4611      	mov	r1, r2
 80009e6:	4a35      	ldr	r2, [pc, #212]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6013      	str	r3, [r2, #0]
		break;
 80009ec:	e05b      	b.n	8000aa6 <MGPIO_voidSetDirection+0x1e2>
		else if (copy_u8PinNumber >= 8 && copy_u8PinNumber <= 15)
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	d958      	bls.n	8000aa6 <MGPIO_voidSetDirection+0x1e2>
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d855      	bhi.n	8000aa6 <MGPIO_voidSetDirection+0x1e2>
			copy_u8PinNumber -= 8;
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	3b08      	subs	r3, #8
 80009fe:	71bb      	strb	r3, [r7, #6]
			GPIO_PORTB_REG->CRH &= ~(15<< (4 * copy_u8PinNumber));
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	79ba      	ldrb	r2, [r7, #6]
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	210f      	movs	r1, #15
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	43d2      	mvns	r2, r2
 8000a10:	4611      	mov	r1, r2
 8000a12:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 8000a14:	400b      	ands	r3, r1
 8000a16:	6053      	str	r3, [r2, #4]
			GPIO_PORTB_REG->CRH |= (copy_u8Mode << (4 * copy_u8PinNumber));
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	7979      	ldrb	r1, [r7, #5]
 8000a1e:	79ba      	ldrb	r2, [r7, #6]
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	fa01 f202 	lsl.w	r2, r1, r2
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a24      	ldr	r2, [pc, #144]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	6053      	str	r3, [r2, #4]
			GPIO_PORTB_REG->CRH |= (copy_u8CNF << ((4 * copy_u8PinNumber) + 2));
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	7939      	ldrb	r1, [r7, #4]
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	3202      	adds	r2, #2
 8000a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <MGPIO_voidSetDirection+0x1f8>)
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6053      	str	r3, [r2, #4]
		break;
 8000a46:	e02e      	b.n	8000aa6 <MGPIO_voidSetDirection+0x1e2>
		if (copy_u8PinNumber >= 13 && copy_u8PinNumber <= 15)
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	2b0c      	cmp	r3, #12
 8000a4c:	d92d      	bls.n	8000aaa <MGPIO_voidSetDirection+0x1e6>
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d82a      	bhi.n	8000aaa <MGPIO_voidSetDirection+0x1e6>
			copy_u8PinNumber -= 8;
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	3b08      	subs	r3, #8
 8000a58:	71bb      	strb	r3, [r7, #6]
			GPIO_PORTC_REG->CRH &= ~(15<< (4 * copy_u8PinNumber));
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MGPIO_voidSetDirection+0x1fc>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	210f      	movs	r1, #15
 8000a64:	fa01 f202 	lsl.w	r2, r1, r2
 8000a68:	43d2      	mvns	r2, r2
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <MGPIO_voidSetDirection+0x1fc>)
 8000a6e:	400b      	ands	r3, r1
 8000a70:	6053      	str	r3, [r2, #4]
			GPIO_PORTC_REG->CRH |= (copy_u8Mode << (4 * copy_u8PinNumber));
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MGPIO_voidSetDirection+0x1fc>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	7979      	ldrb	r1, [r7, #5]
 8000a78:	79ba      	ldrb	r2, [r7, #6]
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <MGPIO_voidSetDirection+0x1fc>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6053      	str	r3, [r2, #4]
			GPIO_PORTC_REG->CRH |= (copy_u8CNF << ((4 * copy_u8PinNumber) + 2));
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MGPIO_voidSetDirection+0x1fc>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	7939      	ldrb	r1, [r7, #4]
 8000a8e:	79ba      	ldrb	r2, [r7, #6]
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	3202      	adds	r2, #2
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <MGPIO_voidSetDirection+0x1fc>)
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6053      	str	r3, [r2, #4]
		break;
 8000aa0:	e003      	b.n	8000aaa <MGPIO_voidSetDirection+0x1e6>
		break;
 8000aa2:	bf00      	nop
 8000aa4:	e002      	b.n	8000aac <MGPIO_voidSetDirection+0x1e8>
		break;
 8000aa6:	bf00      	nop
 8000aa8:	e000      	b.n	8000aac <MGPIO_voidSetDirection+0x1e8>
		break;
 8000aaa:	bf00      	nop
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc90      	pop	{r4, r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	40011000 	.word	0x40011000

08000ac4 <MNVIC_voidEnablePeripheral>:
#include "../../include/MCAL/NVIC/NVIC_private.h"
#include "../../include/MCAL/SCB/SCB_interface.h"

/*enable a specific interrupt*/
void MNVIC_voidEnablePeripheral(u8 copy_u8InterruptID)
{
 8000ac4:	b490      	push	{r4, r7}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	NVIC_REG->ISER[copy_u8InterruptID/32] |= (1<<copy_u8InterruptID%32);
 8000ace:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <MNVIC_voidEnablePeripheral+0x3c>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	b2d8      	uxtb	r0, r3
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	f002 021f 	and.w	r2, r2, #31
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	4614      	mov	r4, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <MNVIC_voidEnablePeripheral+0x3c>)
 8000aec:	4601      	mov	r1, r0
 8000aee:	4323      	orrs	r3, r4
 8000af0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc90      	pop	{r4, r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <MNVIC_voidSetIntPriority>:
}


/*before calling this function, the MSCB_voidSetGroupPriority function must be called first to configure the functionality for those bits*/
void MNVIC_voidSetIntPriority(s8 copy_u8InterruptID,u8 copy_u8GroupPriority,u8 copy_u8SubPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	4613      	mov	r3, r2
 8000b14:	717b      	strb	r3, [r7, #5]
	/*check if its a core peripheral*/
	if(copy_u8InterruptID < 0)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da07      	bge.n	8000b2e <MNVIC_voidSetIntPriority+0x2a>
	{
		MSCB_voidSetCoreIntPriority(copy_u8InterruptID,copy_u8GroupPriority,copy_u8SubPriority);
 8000b1e:	797a      	ldrb	r2, [r7, #5]
 8000b20:	79b9      	ldrb	r1, [r7, #6]
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fa02 	bl	8000f30 <MSCB_voidSetCoreIntPriority>
			break;
		}
	}


}
 8000b2c:	e065      	b.n	8000bfa <MNVIC_voidSetIntPriority+0xf6>
		u8 local_SysGroupPriority=MSCB_voidGetSystemGroupPriority();
 8000b2e:	f000 f9ef 	bl	8000f10 <MSCB_voidGetSystemGroupPriority>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]
		switch(local_SysGroupPriority)
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	2b65      	cmp	r3, #101	; 0x65
 8000b3a:	d02a      	beq.n	8000b92 <MNVIC_voidSetIntPriority+0x8e>
 8000b3c:	2b65      	cmp	r3, #101	; 0x65
 8000b3e:	dc04      	bgt.n	8000b4a <MNVIC_voidSetIntPriority+0x46>
 8000b40:	2b09      	cmp	r3, #9
 8000b42:	d007      	beq.n	8000b54 <MNVIC_voidSetIntPriority+0x50>
 8000b44:	2b64      	cmp	r3, #100	; 0x64
 8000b46:	d00f      	beq.n	8000b68 <MNVIC_voidSetIntPriority+0x64>
}
 8000b48:	e057      	b.n	8000bfa <MNVIC_voidSetIntPriority+0xf6>
		switch(local_SysGroupPriority)
 8000b4a:	2b6e      	cmp	r3, #110	; 0x6e
 8000b4c:	d036      	beq.n	8000bbc <MNVIC_voidSetIntPriority+0xb8>
 8000b4e:	2b6f      	cmp	r3, #111	; 0x6f
 8000b50:	d049      	beq.n	8000be6 <MNVIC_voidSetIntPriority+0xe2>
}
 8000b52:	e052      	b.n	8000bfa <MNVIC_voidSetIntPriority+0xf6>
			NVIC_REG->IPR[copy_u8InterruptID] = (copy_u8GroupPriority<<4);
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <MNVIC_voidSetIntPriority+0x100>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	79ba      	ldrb	r2, [r7, #6]
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000b66:	e048      	b.n	8000bfa <MNVIC_voidSetIntPriority+0xf6>
			copy_u8SubPriority &= 0x01;
 8000b68:	797b      	ldrb	r3, [r7, #5]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	717b      	strb	r3, [r7, #5]
			NVIC_REG->IPR[copy_u8InterruptID] = (copy_u8GroupPriority<<5)|(copy_u8SubPriority<<4);
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	015b      	lsls	r3, r3, #5
 8000b74:	b25a      	sxtb	r2, r3
 8000b76:	797b      	ldrb	r3, [r7, #5]
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b259      	sxtb	r1, r3
 8000b80:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <MNVIC_voidSetIntPriority+0x100>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	b2c9      	uxtb	r1, r1
 8000b88:	4413      	add	r3, r2
 8000b8a:	460a      	mov	r2, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000b90:	e033      	b.n	8000bfa <MNVIC_voidSetIntPriority+0xf6>
			copy_u8SubPriority &= 0x03;
 8000b92:	797b      	ldrb	r3, [r7, #5]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	717b      	strb	r3, [r7, #5]
			NVIC_REG->IPR[copy_u8InterruptID] = (copy_u8GroupPriority<<6)|(copy_u8SubPriority<<4);
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	b25a      	sxtb	r2, r3
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b259      	sxtb	r1, r3
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <MNVIC_voidSetIntPriority+0x100>)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	b2c9      	uxtb	r1, r1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000bba:	e01e      	b.n	8000bfa <MNVIC_voidSetIntPriority+0xf6>
			copy_u8SubPriority &= 0x07;
 8000bbc:	797b      	ldrb	r3, [r7, #5]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	717b      	strb	r3, [r7, #5]
			NVIC_REG->IPR[copy_u8InterruptID] = (copy_u8GroupPriority<<7)|(copy_u8SubPriority<<4);
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	b25a      	sxtb	r2, r3
 8000bca:	797b      	ldrb	r3, [r7, #5]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b259      	sxtb	r1, r3
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <MNVIC_voidSetIntPriority+0x100>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	b2c9      	uxtb	r1, r1
 8000bdc:	4413      	add	r3, r2
 8000bde:	460a      	mov	r2, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000be4:	e009      	b.n	8000bfa <MNVIC_voidSetIntPriority+0xf6>
			NVIC_REG->IPR[copy_u8InterruptID] =(copy_u8SubPriority<<4);
 8000be6:	4907      	ldr	r1, [pc, #28]	; (8000c04 <MNVIC_voidSetIntPriority+0x100>)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	797a      	ldrb	r2, [r7, #5]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000bf8:	bf00      	nop
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <MRCC_CheckReady>:
 * 							-CLK_ARG_OUT_OF_RANGE.
 *
 * DESC: this function check if the selected clock source is now stable and ready to work.
 * *********************************************************************************************/
u8 MRCC_CheckReady(u8 copy_u8ClkType)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	u8 local_u8_CheckReady=CLK_READY;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
	u32 local_u8_counter=0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]

	if(copy_u8ClkType!=CLK_HSI && copy_u8ClkType!=CLK_HSE &&  copy_u8ClkType!=CLK_PLL)
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d013      	beq.n	8000c48 <MRCC_CheckReady+0x40>
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b11      	cmp	r3, #17
 8000c24:	d010      	beq.n	8000c48 <MRCC_CheckReady+0x40>
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	d00d      	beq.n	8000c48 <MRCC_CheckReady+0x40>
	{
		local_u8_CheckReady=CLK_ARG_OUT_OF_RANGE;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e013      	b.n	8000c5a <MRCC_CheckReady+0x52>
	}
	else
	{
		while(GET_BIT(RCC_U32_CR_REG,copy_u8ClkType)==CLK_NOT_READY)
		{
			local_u8_counter++;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
			if(local_u8_counter==CLK_READY_TIME_OUT)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d102      	bne.n	8000c48 <MRCC_CheckReady+0x40>
			{
				local_u8_CheckReady=CLK_NOT_READY;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
				break;
 8000c46:	e008      	b.n	8000c5a <MRCC_CheckReady+0x52>
		while(GET_BIT(RCC_U32_CR_REG,copy_u8ClkType)==CLK_NOT_READY)
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MRCC_CheckReady+0x60>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0eb      	beq.n	8000c32 <MRCC_CheckReady+0x2a>
			}
		}
	}


	return local_u8_CheckReady;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <MRCC_SetClkSource>:
 * 							-RCC_NOK.
 *
 * DESC: this function sets the clock source that will be used in the system.
 * *********************************************************************************************/
u8 MRCC_SetClkSource(u8 copy_u8ClkType)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	u8 local_u8_check_error=0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
	switch (copy_u8ClkType)
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b11      	cmp	r3, #17
 8000c7e:	d00c      	beq.n	8000c9a <MRCC_SetClkSource+0x2e>
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	d015      	beq.n	8000cb0 <MRCC_SetClkSource+0x44>
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d11e      	bne.n	8000cc6 <MRCC_SetClkSource+0x5a>
	{
	case CLK_HSI:
		RCC_U32_CFGR_REG = ((RCC_U32_CFGR_REG&0xFFFFFFFC)|0);
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MRCC_SetClkSource+0x6c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <MRCC_SetClkSource+0x6c>)
 8000c8e:	f023 0303 	bic.w	r3, r3, #3
 8000c92:	6013      	str	r3, [r2, #0]
		local_u8_check_error = RCC_OK;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
		break;
 8000c98:	e017      	b.n	8000cca <MRCC_SetClkSource+0x5e>
	case CLK_HSE:
		RCC_U32_CFGR_REG = (RCC_U32_CFGR_REG&0xFFFFFFFC)| 1;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MRCC_SetClkSource+0x6c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 0303 	bic.w	r3, r3, #3
 8000ca2:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <MRCC_SetClkSource+0x6c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6013      	str	r3, [r2, #0]
		local_u8_check_error = RCC_OK;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
		break;
 8000cae:	e00c      	b.n	8000cca <MRCC_SetClkSource+0x5e>
	case CLK_PLL:
		RCC_U32_CFGR_REG = (RCC_U32_CFGR_REG&0xFFFFFFFC)| 2;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MRCC_SetClkSource+0x6c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 0303 	bic.w	r3, r3, #3
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <MRCC_SetClkSource+0x6c>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	6013      	str	r3, [r2, #0]
		local_u8_check_error = RCC_OK;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc4:	e001      	b.n	8000cca <MRCC_SetClkSource+0x5e>
	default:
		local_u8_check_error = RCC_NOK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]
	}

	return local_u8_check_error;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021004 	.word	0x40021004

08000cdc <MRCC_SetClkSourceStatus>:
 * return: NONE
 *
 * DESC: this function enable/disable a specified clock source
 * *********************************************************************************************/
void MRCC_SetClkSourceStatus(u8 copy_u32ClkSource, u8 copy_u8Status)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	71bb      	strb	r3, [r7, #6]
	switch(copy_u8Status)
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d020      	beq.n	8000d34 <MRCC_SetClkSourceStatus+0x58>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d000      	beq.n	8000cf8 <MRCC_SetClkSourceStatus+0x1c>
			break;
		}

		break;
	}
}
 8000cf6:	e03b      	b.n	8000d70 <MRCC_SetClkSourceStatus+0x94>
		switch (copy_u32ClkSource)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b11      	cmp	r3, #17
 8000cfc:	d00b      	beq.n	8000d16 <MRCC_SetClkSourceStatus+0x3a>
 8000cfe:	2b19      	cmp	r3, #25
 8000d00:	d010      	beq.n	8000d24 <MRCC_SetClkSourceStatus+0x48>
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d000      	beq.n	8000d08 <MRCC_SetClkSourceStatus+0x2c>
		break;
 8000d06:	e033      	b.n	8000d70 <MRCC_SetClkSourceStatus+0x94>
			SET_BIT(RCC_U32_CR_REG, CLK_HSI_ON_BIT);
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6013      	str	r3, [r2, #0]
			break;
 8000d14:	e00d      	b.n	8000d32 <MRCC_SetClkSourceStatus+0x56>
			SET_BIT(RCC_U32_CR_REG, CLK_HSE_ON_BIT);
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
			break;
 8000d22:	e006      	b.n	8000d32 <MRCC_SetClkSourceStatus+0x56>
			SET_BIT(RCC_U32_CR_REG, CLK_PLL_ON_BIT);
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d2e:	6013      	str	r3, [r2, #0]
			break;
 8000d30:	bf00      	nop
		break;
 8000d32:	e01d      	b.n	8000d70 <MRCC_SetClkSourceStatus+0x94>
		switch (copy_u32ClkSource)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b11      	cmp	r3, #17
 8000d38:	d00b      	beq.n	8000d52 <MRCC_SetClkSourceStatus+0x76>
 8000d3a:	2b19      	cmp	r3, #25
 8000d3c:	d010      	beq.n	8000d60 <MRCC_SetClkSourceStatus+0x84>
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d000      	beq.n	8000d44 <MRCC_SetClkSourceStatus+0x68>
		break;
 8000d42:	e014      	b.n	8000d6e <MRCC_SetClkSourceStatus+0x92>
			CLEAR_BIT(RCC_U32_CR_REG,CLK_HSI_ON_BIT);
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d4a:	f023 0301 	bic.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]
			break;
 8000d50:	e00d      	b.n	8000d6e <MRCC_SetClkSourceStatus+0x92>
			CLEAR_BIT(RCC_U32_CR_REG,CLK_HSE_ON_BIT);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
			break;
 8000d5e:	e006      	b.n	8000d6e <MRCC_SetClkSourceStatus+0x92>
			CLEAR_BIT(RCC_U32_CR_REG,CLK_PLL_ON_BIT);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <MRCC_SetClkSourceStatus+0xa0>)
 8000d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d6a:	6013      	str	r3, [r2, #0]
			break;
 8000d6c:	bf00      	nop
		break;
 8000d6e:	bf00      	nop
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MRCC_SetCLKBussesPrescaller>:
 * return: NONE
 *
 * DESC: this function set the prescaller for all the system busses.
 * *********************************************************************************************/
void MRCC_SetCLKBussesPrescaller(u16 AHP_u16_prescaller, u8 APB1_u8_prescaller, u8 APB2_u8_prescaller)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	717b      	strb	r3, [r7, #5]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	713b      	strb	r3, [r7, #4]
	RCC_U32_CFGR_REG &= 0xC00F;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4911      	ldr	r1, [pc, #68]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000d98:	f24c 030f 	movw	r3, #49167	; 0xc00f
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	600b      	str	r3, [r1, #0]
	/*set the prescallers of the busses*/
	RCC_U32_CFGR_REG |=(APB1_u8_prescaller<<8);
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	797a      	ldrb	r2, [r7, #5]
 8000da6:	0212      	lsls	r2, r2, #8
 8000da8:	4611      	mov	r1, r2
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6013      	str	r3, [r2, #0]
	RCC_U32_CFGR_REG |=(APB2_u8_prescaller<<11);
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	793a      	ldrb	r2, [r7, #4]
 8000db6:	02d2      	lsls	r2, r2, #11
 8000db8:	4611      	mov	r1, r2
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6013      	str	r3, [r2, #0]
	RCC_U32_CFGR_REG |=(AHP_u16_prescaller<<4);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <MRCC_SetCLKBussesPrescaller+0x5c>)
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021004 	.word	0x40021004

08000de0 <MRCC_SetPeripheralConfiguration>:
 *
 * return: NONE
 * DESC: this function used to enable/disable clock delivery for an intended peripheral on a specific bus.
 * ********************************************************************************************************************/
void MRCC_SetPeripheralConfiguration(u8 Peripheral_Name, u8 Peripheral_Bus,u8 Peripheral_Status)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	460b      	mov	r3, r1
 8000dec:	71bb      	strb	r3, [r7, #6]
 8000dee:	4613      	mov	r3, r2
 8000df0:	717b      	strb	r3, [r7, #5]
	switch(Peripheral_Bus)
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d01a      	beq.n	8000e2e <MRCC_SetPeripheralConfiguration+0x4e>
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d02e      	beq.n	8000e5a <MRCC_SetPeripheralConfiguration+0x7a>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d000      	beq.n	8000e02 <MRCC_SetPeripheralConfiguration+0x22>
	case RCC_PERIPHERAL_APB1_BUS:
		CLEAR_BIT(RCC_U32_APB1ENR_REG, Peripheral_Name);
		RCC_U32_APB1ENR_REG |= (Peripheral_Status<<Peripheral_Name);
		break;
	}
}
 8000e00:	e041      	b.n	8000e86 <MRCC_SetPeripheralConfiguration+0xa6>
		CLEAR_BIT(RCC_U32_AHBENR_REG, Peripheral_Name);
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MRCC_SetPeripheralConfiguration+0xb0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	43d2      	mvns	r2, r2
 8000e10:	4611      	mov	r1, r2
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <MRCC_SetPeripheralConfiguration+0xb0>)
 8000e14:	400b      	ands	r3, r1
 8000e16:	6013      	str	r3, [r2, #0]
		RCC_U32_AHBENR_REG |= (Peripheral_Status<<Peripheral_Name);
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MRCC_SetPeripheralConfiguration+0xb0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	7979      	ldrb	r1, [r7, #5]
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <MRCC_SetPeripheralConfiguration+0xb0>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6013      	str	r3, [r2, #0]
		break;
 8000e2c:	e02b      	b.n	8000e86 <MRCC_SetPeripheralConfiguration+0xa6>
		CLEAR_BIT(RCC_U32_APB2ENR_REG, Peripheral_Name);
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MRCC_SetPeripheralConfiguration+0xb4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	79fa      	ldrb	r2, [r7, #7]
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	43d2      	mvns	r2, r2
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MRCC_SetPeripheralConfiguration+0xb4>)
 8000e40:	400b      	ands	r3, r1
 8000e42:	6013      	str	r3, [r2, #0]
		RCC_U32_APB2ENR_REG |= (Peripheral_Status<<Peripheral_Name);
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MRCC_SetPeripheralConfiguration+0xb4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	7979      	ldrb	r1, [r7, #5]
 8000e4a:	79fa      	ldrb	r2, [r7, #7]
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <MRCC_SetPeripheralConfiguration+0xb4>)
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6013      	str	r3, [r2, #0]
		break;
 8000e58:	e015      	b.n	8000e86 <MRCC_SetPeripheralConfiguration+0xa6>
		CLEAR_BIT(RCC_U32_APB1ENR_REG, Peripheral_Name);
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MRCC_SetPeripheralConfiguration+0xb8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	43d2      	mvns	r2, r2
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <MRCC_SetPeripheralConfiguration+0xb8>)
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	6013      	str	r3, [r2, #0]
		RCC_U32_APB1ENR_REG |= (Peripheral_Status<<Peripheral_Name);
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MRCC_SetPeripheralConfiguration+0xb8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	7979      	ldrb	r1, [r7, #5]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <MRCC_SetPeripheralConfiguration+0xb8>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6013      	str	r3, [r2, #0]
		break;
 8000e84:	bf00      	nop
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021014 	.word	0x40021014
 8000e94:	40021018 	.word	0x40021018
 8000e98:	4002101c 	.word	0x4002101c

08000e9c <MRCC_Init>:
 * 					-APB2_BUS_PRESCALLER
 *
 * DESC: this function used to initialize the clock for the system and enable it, initialize the busses prescaller.
 * ********************************************************************************************************************/
void MRCC_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
#if RCC_SYS_CLK_SRC==RCC_SYS_CLK_HSI

u8 check_error;
/*enable HSI*/
MRCC_SetClkSourceStatus(CLK_HSI,CLK_SRC_ENABLE);
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff ff19 	bl	8000cdc <MRCC_SetClkSourceStatus>
/*check ready*/
check_error=MRCC_CheckReady(CLK_HSI);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff feac 	bl	8000c08 <MRCC_CheckReady>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
while( (check_error==CLK_NOT_READY) || (check_error==CLK_ARG_OUT_OF_RANGE) );
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0fc      	beq.n	8000eb4 <MRCC_Init+0x18>
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d0f9      	beq.n	8000eb4 <MRCC_Init+0x18>
/*switch system clock*/
check_error=MRCC_SetClkSource(CLK_HSI);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fed3 	bl	8000c6c <MRCC_SetClkSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
while(check_error==RCC_NOK);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0fc      	beq.n	8000eca <MRCC_Init+0x2e>
/*busses prescaller*/
MRCC_SetCLKBussesPrescaller(AHB_BUS_PRESCALLER,APB1_BUS_PRESCALLER,APB2_BUS_PRESCALLER);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff ff53 	bl	8000d80 <MRCC_SetCLKBussesPrescaller>
/*PLL&HSE disable*/
MRCC_SetClkSourceStatus(CLK_HSE,CLK_SRC_DISABLE);
 8000eda:	2100      	movs	r1, #0
 8000edc:	2011      	movs	r0, #17
 8000ede:	f7ff fefd 	bl	8000cdc <MRCC_SetClkSourceStatus>
MRCC_SetClkSourceStatus(CLK_PLL,CLK_SRC_DISABLE);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2019      	movs	r0, #25
 8000ee6:	f7ff fef9 	bl	8000cdc <MRCC_SetClkSourceStatus>
/*HSI disable*/
MRCC_SetClkSourceStatus(CLK_HSI,CLK_SRC_DISABLE);


#endif
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <MSCB_voidSetSystemGroupPriority>:



/*this function should be called before the MNVIC_voidSetIntPriority function to determine the functionality of the NVIC_IPRs_bits*/
void MSCB_voidSetSystemGroupPriority(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	if(	SCB_INT_PRI_GROUP_SUB_MODE==SCB_PRIORITY_16GP_0SUB || SCB_INT_PRI_GROUP_SUB_MODE==SCB_PRIORITY_8GP_2SUB ||
			SCB_INT_PRI_GROUP_SUB_MODE==SCB_PRIORITY_4GP_4SUB || SCB_INT_PRI_GROUP_SUB_MODE==SCB_PRIORITY_2GP_8SUB ||
			SCB_INT_PRI_GROUP_SUB_MODE==SCB_PRIORITY_0GP_16SUB	)
	{
		SCB_REGS->AIRCR = ( (SCB_VECTKEY<<16) | (SCB_INT_PRI_GROUP_SUB_MODE<<8) );
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <MSCB_voidSetSystemGroupPriority+0x14>)
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <MSCB_voidSetSystemGroupPriority+0x18>)
 8000efc:	60da      	str	r2, [r3, #12]
	}
	else
	{	}

}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0900 	.word	0x05fa0900

08000f10 <MSCB_voidGetSystemGroupPriority>:

/*used to know the current system group priority..
 * called by MSCB_voidSetCoreIntPriority function,
 * called by MNVIC_voidSetIntPriority function*/
u8 MSCB_voidGetSystemGroupPriority(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	return (((SCB_REGS->AIRCR)&0x00000700)>>8);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <MSCB_voidGetSystemGroupPriority+0x1c>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	b2db      	uxtb	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <MSCB_voidSetCoreIntPriority>:


/*used to configure the interrupt priority of any related core peripheral..
 *called by MNVIC_voidSetIntPriority function if the peripheral sent to it is a core peripheral*/
void MSCB_voidSetCoreIntPriority(s8 copy_u8InterruptID,u8 copy_u8GroupPriority,u8 copy_u8SubPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
	u8 local_SysGroupPriority=MSCB_voidGetSystemGroupPriority();
 8000f42:	f7ff ffe5 	bl	8000f10 <MSCB_voidGetSystemGroupPriority>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73bb      	strb	r3, [r7, #14]
	u8 local_u8priority=0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]

	switch(local_SysGroupPriority)
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	2b65      	cmp	r3, #101	; 0x65
 8000f52:	d021      	beq.n	8000f98 <MSCB_voidSetCoreIntPriority+0x68>
 8000f54:	2b65      	cmp	r3, #101	; 0x65
 8000f56:	dc04      	bgt.n	8000f62 <MSCB_voidSetCoreIntPriority+0x32>
 8000f58:	2b09      	cmp	r3, #9
 8000f5a:	d007      	beq.n	8000f6c <MSCB_voidSetCoreIntPriority+0x3c>
 8000f5c:	2b64      	cmp	r3, #100	; 0x64
 8000f5e:	d00a      	beq.n	8000f76 <MSCB_voidSetCoreIntPriority+0x46>
 8000f60:	e041      	b.n	8000fe6 <MSCB_voidSetCoreIntPriority+0xb6>
 8000f62:	2b6e      	cmp	r3, #110	; 0x6e
 8000f64:	d029      	beq.n	8000fba <MSCB_voidSetCoreIntPriority+0x8a>
 8000f66:	2b6f      	cmp	r3, #111	; 0x6f
 8000f68:	d038      	beq.n	8000fdc <MSCB_voidSetCoreIntPriority+0xac>
 8000f6a:	e03c      	b.n	8000fe6 <MSCB_voidSetCoreIntPriority+0xb6>
	{
	case SCB_PRIORITY_16GP_0SUB:
		local_u8priority |= (copy_u8GroupPriority<<0);
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	73fb      	strb	r3, [r7, #15]
		break;
 8000f74:	e037      	b.n	8000fe6 <MSCB_voidSetCoreIntPriority+0xb6>

	case SCB_PRIORITY_8GP_2SUB:
		/*ensuring that only the first bit could be used*/
		copy_u8SubPriority &= 0x01;
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	717b      	strb	r3, [r7, #5]
		local_u8priority |= ( (copy_u8GroupPriority<<1)|(copy_u8SubPriority<<0) );
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b25a      	sxtb	r2, r3
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	73fb      	strb	r3, [r7, #15]
		break;
 8000f96:	e026      	b.n	8000fe6 <MSCB_voidSetCoreIntPriority+0xb6>

	case SCB_PRIORITY_4GP_4SUB:
		/*ensuring that only the first two bits could be used*/
		copy_u8SubPriority &= 0x03;
 8000f98:	797b      	ldrb	r3, [r7, #5]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	717b      	strb	r3, [r7, #5]
		local_u8priority |= ( (copy_u8GroupPriority<<2)|(copy_u8SubPriority<<0) );
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	b25a      	sxtb	r2, r3
 8000fa6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b25a      	sxtb	r2, r3
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000fb8:	e015      	b.n	8000fe6 <MSCB_voidSetCoreIntPriority+0xb6>

	case SCB_PRIORITY_2GP_8SUB:
		/*ensuring that only the first three bits could be used*/
		copy_u8SubPriority &= 0x07;
 8000fba:	797b      	ldrb	r3, [r7, #5]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	717b      	strb	r3, [r7, #5]
		local_u8priority |= ( (copy_u8GroupPriority<<3)|(copy_u8SubPriority<<0) );
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	b25a      	sxtb	r2, r3
 8000fc8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b25a      	sxtb	r2, r3
 8000fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]
		break;
 8000fda:	e004      	b.n	8000fe6 <MSCB_voidSetCoreIntPriority+0xb6>

	case SCB_PRIORITY_0GP_16SUB:
		local_u8priority |= ( (copy_u8SubPriority<<0) );
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	73fb      	strb	r3, [r7, #15]
		break;
 8000fe4:	bf00      	nop
	}


	switch(copy_u8InterruptID)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	3307      	adds	r3, #7
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	d82f      	bhi.n	8001050 <MSCB_voidSetCoreIntPriority+0x120>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <MSCB_voidSetCoreIntPriority+0xc8>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001015 	.word	0x08001015
 8000ffc:	0800101f 	.word	0x0800101f
 8001000:	08001029 	.word	0x08001029
 8001004:	08001033 	.word	0x08001033
 8001008:	08001051 	.word	0x08001051
 800100c:	0800103d 	.word	0x0800103d
 8001010:	08001047 	.word	0x08001047
	{
	case SCB_VECT_MEMORY_MANAGE_ID:
		SCB_REGS->SHPR1 = local_u8priority<<4;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	011a      	lsls	r2, r3, #4
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MSCB_voidSetCoreIntPriority+0x128>)
 800101a:	619a      	str	r2, [r3, #24]
		break;
 800101c:	e018      	b.n	8001050 <MSCB_voidSetCoreIntPriority+0x120>
	case SCB_VECT_BUSFAULT_ID:
		SCB_REGS->SHPR1 = local_u8priority<<12;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	031a      	lsls	r2, r3, #12
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <MSCB_voidSetCoreIntPriority+0x128>)
 8001024:	619a      	str	r2, [r3, #24]
		break;
 8001026:	e013      	b.n	8001050 <MSCB_voidSetCoreIntPriority+0x120>
	case SCB_VECT_USAGE_FAULT_ID:
		SCB_REGS->SHPR1 = local_u8priority<<20;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	051a      	lsls	r2, r3, #20
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MSCB_voidSetCoreIntPriority+0x128>)
 800102e:	619a      	str	r2, [r3, #24]
		break;
 8001030:	e00e      	b.n	8001050 <MSCB_voidSetCoreIntPriority+0x120>
	case SCB_VECT_SVCALL_ID:
		SCB_REGS->SHPR2 = local_u8priority<<28;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	071a      	lsls	r2, r3, #28
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MSCB_voidSetCoreIntPriority+0x128>)
 8001038:	61da      	str	r2, [r3, #28]
		break;
 800103a:	e009      	b.n	8001050 <MSCB_voidSetCoreIntPriority+0x120>
	case SCB_VECT_PENDSV_ID:
		SCB_REGS->SHPR3 = local_u8priority<<20;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	051a      	lsls	r2, r3, #20
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <MSCB_voidSetCoreIntPriority+0x128>)
 8001042:	621a      	str	r2, [r3, #32]
		break;
 8001044:	e004      	b.n	8001050 <MSCB_voidSetCoreIntPriority+0x120>
	case SCB_VECT_SYSTICK_ID:
		SCB_REGS->SHPR3 = local_u8priority<<28;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	071a      	lsls	r2, r3, #28
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <MSCB_voidSetCoreIntPriority+0x128>)
 800104c:	621a      	str	r2, [r3, #32]
		break;
 800104e:	bf00      	nop
	}


}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <MSYSTICK_voidInit>:
 * I/P parms: NONE
 * return: NONE
 * DESC: this function Init the Systick timer, the SYSTICK_INTERRUPT_CONFIG and SYSTICK_CLK_CONFIG should be pre-configured .
 * *****************************************************************************************************************************/
void MSYSTICK_voidInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

	SYSTICK_REGS->CTRL |= (1<<SYSTICK_CTRL_REG_INT_BIT);

#elif	SYSTICK_INTERRUPT_CONFIG == SYSTICK_INTERRUPT_DISABLE

	SYSTICK_REGS->CTRL &=~ (1<<SYSTICK_CTRL_REG_INT_BIT);
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <MSYSTICK_voidInit+0x24>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <MSYSTICK_voidInit+0x24>)
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	6013      	str	r3, [r2, #0]

#endif

#if	SYSTICK_CLK_CONFIG == SYSTICK_CLK_AHB_DIV_8

	SYSTICK_REGS->CTRL &=~ (1<<SYSTICK_CTRL_REG_CLK_BIT);
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <MSYSTICK_voidInit+0x24>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <MSYSTICK_voidInit+0x24>)
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	6013      	str	r3, [r2, #0]
#elif	SYSTICK_CLK_CONFIG == SYSTICK_CLK_AHB

	SYSTICK_REGS->CTRL |= (1<<SYSTICK_CTRL_REG_CLK_BIT);

#endif
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	e000e010 	.word	0xe000e010

08001084 <MSYSTICK_voidDelay_ms>:
 * I/P parms: copy_u32Time_ms
 * return: NONE
 * DESC: this function works as the delay function, it takes the time to wait in Millisecond.
 * *****************************************************************************************************************************/
void MSYSTICK_voidDelay_ms(u32 copy_u32Time_ms)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	u32 local_u32TicksToWait=0;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]

	local_u32TicksToWait = (copy_u32Time_ms*1000);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	60fb      	str	r3, [r7, #12]
	/*load the value in the LOAD register*/
	SYSTICK_REGS->LOAD = local_u32TicksToWait;
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6053      	str	r3, [r2, #4]
	/*write any value to make the count register reset and load the value in SYSTICK_LOAD register*/
	SYSTICK_REGS->VAL = local_u32TicksToWait;
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6093      	str	r3, [r2, #8]
	/*enable the timer*/
	SYSTICK_REGS->CTRL |=(1<<SYSTICK_CTRL_REG_EN_BIT);
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
	/*polling on the flag waiting for underflow of the SYSTICK*/
	while( GET_BIT(SYSTICK_REGS->CTRL,SYSTICK_CTRL_REG__COUNT_FLAG_BIT) !=1 );
 80010b4:	bf00      	nop
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d1f8      	bne.n	80010b6 <MSYSTICK_voidDelay_ms+0x32>
	/*disable the SYSTICK timer*/
	SYSTICK_REGS->CTRL &=~(1<<SYSTICK_CTRL_REG_EN_BIT);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]
	/*pre-load=0*/
	SYSTICK_REGS->LOAD = 0;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <MSYSTICK_voidDelay_ms+0x5c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <SysTick_Handler>:

}

/*Systick ISR*/
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	/*check which function should be executed*/
	if(ptrs[0]!=NULL)
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <SysTick_Handler+0x44>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <SysTick_Handler+0x22>
	{
		/*disable timer*/
		SYSTICK_REGS->CTRL &=~(1<<SYSTICK_CTRL_REG_EN_BIT);
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <SysTick_Handler+0x48>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <SysTick_Handler+0x48>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6013      	str	r3, [r2, #0]
		/*disable interrupt*/
		//SYSTICK_REGS->CTRL &=~ (1<<SYSTICK_CTRL_REG_INT_BIT);
		/*call the single interval function*/
		ptrs[0]();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <SysTick_Handler+0x44>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4798      	blx	r3
 8001104:	e006      	b.n	8001114 <SysTick_Handler+0x30>
	}
	else if(ptrs[1]!=NULL)
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <SysTick_Handler+0x44>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <SysTick_Handler+0x30>
	{
		/*call the periodic interval function*/
		ptrs[1]();
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SysTick_Handler+0x44>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4798      	blx	r3
	}
	/*clear Int flag by reading it*/
	u32 temp = GET_BIT( (SYSTICK_REGS->CTRL) ,16);
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Handler+0x48>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000024 	.word	0x20000024
 800112c:	e000e010 	.word	0xe000e010

08001130 <MUSART_VidInit>:

#define THRESHOLD_VALUE  9000000UL

void (*MUSART1_CallBack)(void);

void MUSART_VidInit ( void ){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0

	u32 LOC_u64Mantissa = ( F_CPU ) / ( 16 * USART1_BAUD_RATE ) ;
 8001136:	2304      	movs	r3, #4
 8001138:	607b      	str	r3, [r7, #4]

	u32 LOC_u64Fraction = ( ( ( F_CPU * 100 ) / ( 16 * USART1_BAUD_RATE )  ) % 100 ) * 16 ;
 800113a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800113e:	603b      	str	r3, [r7, #0]

	if( LOC_u64Fraction > 1500 ){ LOC_u64Mantissa += 1 ; LOC_u64Fraction  = 0 ; }
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001146:	4293      	cmp	r3, r2
 8001148:	d904      	bls.n	8001154 <MUSART_VidInit+0x24>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]

	#if USART1_STATUS == USART1_ENABLE

		MUSART1 -> SR = 0;
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

		#if   USART1_WORD_LENGTH == _8BIT_WORD_LENGTH

					CLEAR_BIT( MUSART1 -> CR1 , 12 );
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MUSART_VidInit+0xa8>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001164:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_PARITY == PARITY_DISABLE

					CLEAR_BIT( MUSART1 -> CR1 , 10 );
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <MUSART_VidInit+0xa8>)
 800116c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001170:	60d3      	str	r3, [r2, #12]

					SET_BIT( MUSART1 -> CR1 , 6 );

		#elif USART1_INTERRUPT == RXNE_INT_ENABLE

					SET_BIT( MUSART1 -> CR1 , 5 );
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_TRANSMITTER == TRANSMITTER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 3 );
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_RECEIVER == RECEIVER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 2 );
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MUSART_VidInit+0xa8>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_STOP_BITS == ONE_STOP_BIT

					CLEAR_BIT( MUSART1 -> CR2 , 12 ); CLEAR_BIT( MUSART1 -> CR2 , 13 );
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MUSART_VidInit+0xa8>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <MUSART_VidInit+0xa8>)
 800119c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011a0:	6113      	str	r3, [r2, #16]
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MUSART_VidInit+0xa8>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <MUSART_VidInit+0xa8>)
 80011a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011ac:	6113      	str	r3, [r2, #16]
					SET_BIT( MUSART1 -> CR2 , 12 ); SET_BIT( MUSART1 -> CR2 , 13 );


		#endif

		MUSART1 -> BRR = ( LOC_u64Mantissa << 4  ) | ( LOC_u64Fraction / 100 ) ;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	011a      	lsls	r2, r3, #4
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	4909      	ldr	r1, [pc, #36]	; (80011dc <MUSART_VidInit+0xac>)
 80011b6:	fba1 1303 	umull	r1, r3, r1, r3
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	4906      	ldr	r1, [pc, #24]	; (80011d8 <MUSART_VidInit+0xa8>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
		SET_BIT( MUSART1 -> CR1 , 13 );
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MUSART_VidInit+0xa8>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <MUSART_VidInit+0xa8>)
 80011c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011cc:	60d3      	str	r3, [r2, #12]
	#elif USART1_STATUS == USART1_DISABLE
		CLEAR_BIT( MUSART1 -> CR1 , 0 );

	#endif

}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40013800 	.word	0x40013800
 80011dc:	51eb851f 	.word	0x51eb851f

080011e0 <MUSART1_VidSendCharSync>:


void MUSART1_VidSendCharSync ( u8 Copy_u8Char ){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]

	MUSART1 -> DR = Copy_u8Char ;
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <MUSART1_VidSendCharSync+0x38>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	6053      	str	r3, [r2, #4]

	while( GET_BIT( MUSART1 -> SR , 6 ) == 0 );
 80011f0:	bf00      	nop
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MUSART1_VidSendCharSync+0x38>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	099b      	lsrs	r3, r3, #6
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f8      	beq.n	80011f2 <MUSART1_VidSendCharSync+0x12>

	CLEAR_BIT( MUSART1 -> SR , 6 );
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <MUSART1_VidSendCharSync+0x38>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <MUSART1_VidSendCharSync+0x38>)
 8001206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800120a:	6013      	str	r3, [r2, #0]

}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40013800 	.word	0x40013800

0800121c <MUSART1_VidSendStringSynch>:

void MUSART1_VidSendStringSynch ( u8 * Copy_ptrString ){
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

	u8 LOC_u8Iterator = 0 ;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' ){
 8001228:	e009      	b.n	800123e <MUSART1_VidSendStringSynch+0x22>

		MUSART1_VidSendCharSync( Copy_ptrString[ LOC_u8Iterator ] );
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffd4 	bl	80011e0 <MUSART1_VidSendCharSync>
		LOC_u8Iterator++ ;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' ){
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ef      	bne.n	800122a <MUSART1_VidSendStringSynch+0xe>

	}

}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MUSART1_VidClearFlags>:

	return ( String );

}

void MUSART1_VidClearFlags( void ){
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

	/* Clear all flags */
	MUSART1 -> SR = 0;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <MUSART1_VidClearFlags+0x14>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]

}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40013800 	.word	0x40013800

0800126c <MUSART1_u8ReadDataRegister>:

extern Global_RecordCompleteflag;

u8 MUSART1_u8ReadDataRegister ( void )
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	if( MUSART1 -> DR =='\n')
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MUSART1_u8ReadDataRegister+0x20>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b0a      	cmp	r3, #10
 8001276:	d102      	bne.n	800127e <MUSART1_u8ReadDataRegister+0x12>
	{
		Global_RecordCompleteflag=1;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <MUSART1_u8ReadDataRegister+0x24>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
	}
	return ( MUSART1 -> DR );
 800127e:	4b03      	ldr	r3, [pc, #12]	; (800128c <MUSART1_u8ReadDataRegister+0x20>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	b2db      	uxtb	r3, r3

}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40013800 	.word	0x40013800
 8001290:	2000002c 	.word	0x2000002c

08001294 <MUSART1_VidSetCallBack>:


void MUSART1_VidSetCallBack( void (*ptr) (void) ){
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

	MUSART1_CallBack = ptr ;
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <MUSART1_VidSetCallBack+0x18>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]

}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	200000a8 	.word	0x200000a8

080012b0 <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

	MUSART1_VidClearFlags();
 80012b4:	f7ff ffce 	bl	8001254 <MUSART1_VidClearFlags>
	MUSART1_CallBack();
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <USART1_IRQHandler+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4798      	blx	r3

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000a8 	.word	0x200000a8

080012c8 <CAN_voidCallBackFunction>:

CAN_STRING_Buffer_t Rx_Buffer;
RX_Struct_t Rx_Header;

void CAN_voidCallBackFunction(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	// read upcoming data and release the FIFO
	u8 status;
	status = CAN_u8ReceiveStringTest(1, &Rx_Header, &Rx_Buffer, '\n');
 80012ce:	230a      	movs	r3, #10
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <CAN_voidCallBackFunction+0x2c>)
 80012d2:	4909      	ldr	r1, [pc, #36]	; (80012f8 <CAN_voidCallBackFunction+0x30>)
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff f965 	bl	80005a4 <CAN_u8ReceiveStringTest>
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]

	if (status)
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <CAN_voidCallBackFunction+0x24>
	{
		Rx_Buffer.counter = 0;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <CAN_voidCallBackFunction+0x2c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000ac 	.word	0x200000ac
 80012f8:	200000e0 	.word	0x200000e0

080012fc <main>:



int main ( void ){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af04      	add	r7, sp, #16


	/* Create Variable To Receive Data From Server */
	u8* local_PtrData = NULL;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]

	/*HSI_CLK=8MHZ , all busses prescaller=1*/
	MRCC_Init();
 8001306:	f7ff fdc9 	bl	8000e9c <MRCC_Init>
	/*enable clock for GPIOA*/
	MRCC_SetPeripheralConfiguration(RCC_PERIPHERAL_IOPA,RCC_PERIPHERAL_APB2_BUS,RCC_PERIPHERAL_ENABLE);
 800130a:	2201      	movs	r2, #1
 800130c:	2101      	movs	r1, #1
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff fd66 	bl	8000de0 <MRCC_SetPeripheralConfiguration>
	/*enable clock for USART1*/
	MRCC_SetPeripheralConfiguration(RCC_PERIPHERAL_USART1,RCC_PERIPHERAL_APB2_BUS,RCC_PERIPHERAL_ENABLE);
 8001314:	2201      	movs	r2, #1
 8001316:	2101      	movs	r1, #1
 8001318:	200e      	movs	r0, #14
 800131a:	f7ff fd61 	bl	8000de0 <MRCC_SetPeripheralConfiguration>
	/*enable clock for CAN1*/
	MRCC_SetPeripheralConfiguration(RCC_PERIPHERAL_CAN,RCC_PERIPHERAL_APB1_BUS,RCC_PERIPHERAL_ENABLE);
 800131e:	2201      	movs	r2, #1
 8001320:	2102      	movs	r1, #2
 8001322:	2019      	movs	r0, #25
 8001324:	f7ff fd5c 	bl	8000de0 <MRCC_SetPeripheralConfiguration>

	/*adjust system group priority with the pre-configured value.. GP_PRI=16 , SUB_PRI=0*/
	MSCB_voidSetSystemGroupPriority();
 8001328:	f7ff fde4 	bl	8000ef4 <MSCB_voidSetSystemGroupPriority>
	/*set priority for systick timer ID=SCB_VECT_SYSTICK_ID , GP_PRI=1 , SUB_PRI=neglected*/
	MNVIC_voidSetIntPriority(SCB_VECT_SYSTICK_ID,1,1);
 800132c:	2201      	movs	r2, #1
 800132e:	2101      	movs	r1, #1
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff fbe6 	bl	8000b04 <MNVIC_voidSetIntPriority>

	/*enable interrupt for CAN-RX0*/
	MNVIC_voidEnablePeripheral(20);
 8001338:	2014      	movs	r0, #20
 800133a:	f7ff fbc3 	bl	8000ac4 <MNVIC_voidEnablePeripheral>
	/*set priority for CAN ID=20 , GP_PRI=2 , SUB_PRI=neglected*/
	MNVIC_voidSetIntPriority(20,2,1);
 800133e:	2201      	movs	r2, #1
 8001340:	2102      	movs	r1, #2
 8001342:	2014      	movs	r0, #20
 8001344:	f7ff fbde 	bl	8000b04 <MNVIC_voidSetIntPriority>

	/*enable interrupt for USART*/
	MNVIC_voidEnablePeripheral(37);
 8001348:	2025      	movs	r0, #37	; 0x25
 800134a:	f7ff fbbb 	bl	8000ac4 <MNVIC_voidEnablePeripheral>
	/*set priority for USART1 ID=37 , GP_PRI=3 , SUB_PRI=neglected*/
	MNVIC_voidSetIntPriority(37,3,1);
 800134e:	2201      	movs	r2, #1
 8001350:	2103      	movs	r1, #3
 8001352:	2025      	movs	r0, #37	; 0x25
 8001354:	f7ff fbd6 	bl	8000b04 <MNVIC_voidSetIntPriority>


	/*PA0 output -> LED*/
	MGPIO_voidSetDirection(GPIO_PORTA,GPIO_PIN0,GPIO_OUTPUT_10M_SPEED_MODE,GPIO_OUTPUT_PUSH_PULL);
 8001358:	2300      	movs	r3, #0
 800135a:	2201      	movs	r2, #1
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fab0 	bl	80008c4 <MGPIO_voidSetDirection>
	/*PA9 output -> TX USART1*/
	MGPIO_voidSetDirection(GPIO_PORTA,GPIO_PIN9,GPIO_OUTPUT_10M_SPEED_MODE,GPIO_AF_OUTPUT_PUSH_PULL);
 8001364:	2302      	movs	r3, #2
 8001366:	2201      	movs	r2, #1
 8001368:	2109      	movs	r1, #9
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff faaa 	bl	80008c4 <MGPIO_voidSetDirection>
	/*PA10 input -> RX USART1*/
	MGPIO_voidSetDirection(GPIO_PORTA,GPIO_PIN10,GPIO_INPUT_MODE,GPIO_FLOATING_INPUT);
 8001370:	2301      	movs	r3, #1
 8001372:	2200      	movs	r2, #0
 8001374:	210a      	movs	r1, #10
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff faa4 	bl	80008c4 <MGPIO_voidSetDirection>
	/*PA12 output -> TX CAN*/
	MGPIO_voidSetDirection(GPIO_PORTA,GPIO_PIN12,GPIO_OUTPUT_10M_SPEED_MODE,GPIO_AF_OUTPUT_PUSH_PULL);
 800137c:	2302      	movs	r3, #2
 800137e:	2201      	movs	r2, #1
 8001380:	210c      	movs	r1, #12
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fa9e 	bl	80008c4 <MGPIO_voidSetDirection>
	/*PA11 input -> RX CAN*/
	MGPIO_voidSetDirection(GPIO_PORTA,GPIO_PIN11,GPIO_INPUT_MODE,GPIO_FLOATING_INPUT);
 8001388:	2301      	movs	r3, #1
 800138a:	2200      	movs	r2, #0
 800138c:	210b      	movs	r1, #11
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fa98 	bl	80008c4 <MGPIO_voidSetDirection>

	/*initialize SYSTICK*/
	MSYSTICK_voidInit();
 8001394:	f7ff fe62 	bl	800105c <MSYSTICK_voidInit>

	/* Initialize UART */
	MUSART_VidInit();
 8001398:	f7ff feca 	bl	8001130 <MUSART_VidInit>

	/************************************************* CAN configuration ***************************************/

	// the value with which the comparison will happen according to the mask
	u32 ID = CAN_u32GetProperFilterValues(0x100, 0x525, 0, 0); // the first value for the filter of Inquiry
 800139c:	2300      	movs	r3, #0
 800139e:	2200      	movs	r2, #0
 80013a0:	f240 5125 	movw	r1, #1317	; 0x525
 80013a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013a8:	f7fe ff5e 	bl	8000268 <CAN_u32GetProperFilterValues>
 80013ac:	60b8      	str	r0, [r7, #8]

	// the mask value or the second identifier value depending on the mode
	u32 ID2_MASK = CAN_u32GetProperFilterValues(0x1F0, 0xFFF, 0, 0);
 80013ae:	2300      	movs	r3, #0
 80013b0:	2200      	movs	r2, #0
 80013b2:	f640 71ff 	movw	r1, #4095	; 0xfff
 80013b6:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 80013ba:	f7fe ff55 	bl	8000268 <CAN_u32GetProperFilterValues>
 80013be:	6078      	str	r0, [r7, #4]

	u32 ID_tx = CAN_u32GetProperFilterValues(0x100, 0x525, 0, 0); // the identifier which this ECU will use to send data to WIFI ECU
 80013c0:	2300      	movs	r3, #0
 80013c2:	2200      	movs	r2, #0
 80013c4:	f240 5125 	movw	r1, #1317	; 0x525
 80013c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013cc:	f7fe ff4c 	bl	8000268 <CAN_u32GetProperFilterValues>
 80013d0:	6038      	str	r0, [r7, #0]

	CAN_voidFilterConfiguration(10, CAN_FILTER_MODE_IDENTIFIER_LIST_MODE,
 80013d2:	2301      	movs	r3, #1
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	2201      	movs	r2, #1
 80013e2:	2101      	movs	r1, #1
 80013e4:	200a      	movs	r0, #10
 80013e6:	f7fe fec3 	bl	8000170 <CAN_voidFilterConfiguration>
			CAN_FILTER_SCALE_SINGLE_32_BIT, CAN_FILTER_ASSIGNMENT_FIFO_1,
			ID, ID2_MASK, CAN_STATUS_ENABLE);

	CAN_voidInterruptStatus(CAN_EVENT_FIFO_1_PENDING, CAN_STATUS_ENABLE);
 80013ea:	2101      	movs	r1, #1
 80013ec:	2004      	movs	r0, #4
 80013ee:	f7ff f811 	bl	8000414 <CAN_voidInterruptStatus>

	CAN_voidSetCallBack(CAN_voidCallBackFunction);
 80013f2:	482a      	ldr	r0, [pc, #168]	; (800149c <main+0x1a0>)
 80013f4:	f7ff f97e 	bl	80006f4 <CAN_voidSetCallBack>

	CAN_voidInit();
 80013f8:	f7fe ff56 	bl	80002a8 <CAN_voidInit>
	/***************************************************************************************************/


	/* Setting ESP8266 Mode */
	ESP8266_VidInit();
 80013fc:	f7ff f9ac 	bl	8000758 <ESP8266_VidInit>

	/* Connecting To WIFI Network */
	ESP8266_VidConnectToWiFi( (u8 *)"WEDBA56B" , (u8 *)"l4048422" );
 8001400:	4927      	ldr	r1, [pc, #156]	; (80014a0 <main+0x1a4>)
 8001402:	4828      	ldr	r0, [pc, #160]	; (80014a4 <main+0x1a8>)
 8001404:	f7ff f9d0 	bl	80007a8 <ESP8266_VidConnectToWiFi>


	/*ta3delat*/
	ESP8266_VidConnectToSrvTcp( (u8 *)"192.168.1.3" , (u8 *)"5050" );
 8001408:	4927      	ldr	r1, [pc, #156]	; (80014a8 <main+0x1ac>)
 800140a:	4828      	ldr	r0, [pc, #160]	; (80014ac <main+0x1b0>)
 800140c:	f7ff f9f0 	bl	80007f0 <ESP8266_VidConnectToSrvTcp>
	local_PtrData=(u8 *)ESP8266_PTRu8SocketSendData((u8 *) "version=3.2" ,(u8 *)"11");
 8001410:	4927      	ldr	r1, [pc, #156]	; (80014b0 <main+0x1b4>)
 8001412:	4828      	ldr	r0, [pc, #160]	; (80014b4 <main+0x1b8>)
 8001414:	f7ff fa10 	bl	8000838 <ESP8266_PTRu8SocketSendData>
 8001418:	60f8      	str	r0, [r7, #12]
	if(local_PtrData[38]=='n' && local_PtrData[39]=='o')
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3326      	adds	r3, #38	; 0x26
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b6e      	cmp	r3, #110	; 0x6e
 8001422:	d104      	bne.n	800142e <main+0x132>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3327      	adds	r3, #39	; 0x27
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b6f      	cmp	r3, #111	; 0x6f
 800142c:	d004      	beq.n	8001438 <main+0x13c>
	{ /*do nothing there is no update*/ }
	else
	{
		local_PtrData=(u8 *)ESP8266_PTRu8SocketSendData((u8 *) "ok" ,(u8 *)"2");
 800142e:	4922      	ldr	r1, [pc, #136]	; (80014b8 <main+0x1bc>)
 8001430:	4822      	ldr	r0, [pc, #136]	; (80014bc <main+0x1c0>)
 8001432:	f7ff fa01 	bl	8000838 <ESP8266_PTRu8SocketSendData>
 8001436:	60f8      	str	r0, [r7, #12]
	}

	while(1)
	{
		if(Global_RecordCompleteflag==1)
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <main+0x1c4>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d1fb      	bne.n	8001438 <main+0x13c>
		{

			//send the data in the local_PtrData by the CAN
			CAN_TransmitStringTest(0,(u8 *)&local_PtrData[37],ID_tx);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3325      	adds	r3, #37	; 0x25
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff f819 	bl	8000480 <CAN_TransmitStringTest>
			//wait to receive ok from bootloader CAN
			if(Rx_Buffer.Buffer[0]=='o' && Rx_Buffer.Buffer[1]=='k')
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <main+0x1c8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b6f      	cmp	r3, #111	; 0x6f
 8001454:	d10c      	bne.n	8001470 <main+0x174>
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <main+0x1c8>)
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	2b6b      	cmp	r3, #107	; 0x6b
 800145c:	d108      	bne.n	8001470 <main+0x174>
			{
				Global_RecordCompleteflag=0;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <main+0x1c4>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
				//send ok to server
				local_PtrData=(u8 *)ESP8266_PTRu8SocketSendData((u8 *) "ok" ,(u8 *)"2");
 8001464:	4914      	ldr	r1, [pc, #80]	; (80014b8 <main+0x1bc>)
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <main+0x1c0>)
 8001468:	f7ff f9e6 	bl	8000838 <ESP8266_PTRu8SocketSendData>
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	e013      	b.n	8001498 <main+0x19c>
			}
			//or receive nok from bootloader CAN
			else if(Rx_Buffer.Buffer[0]=='n' && Rx_Buffer.Buffer[1]=='a'
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <main+0x1c8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b6e      	cmp	r3, #110	; 0x6e
 8001476:	d1df      	bne.n	8001438 <main+0x13c>
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <main+0x1c8>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	2b61      	cmp	r3, #97	; 0x61
 800147e:	d1db      	bne.n	8001438 <main+0x13c>
					&& Rx_Buffer.Buffer[2]=='k')
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <main+0x1c8>)
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	2b6b      	cmp	r3, #107	; 0x6b
 8001486:	d1d7      	bne.n	8001438 <main+0x13c>
			{
				Global_RecordCompleteflag=0;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <main+0x1c4>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
				local_PtrData=ESP8266_PTRu8SocketSendData((u8 *) "complete" ,(u8 *)"8");
 800148e:	490e      	ldr	r1, [pc, #56]	; (80014c8 <main+0x1cc>)
 8001490:	480e      	ldr	r0, [pc, #56]	; (80014cc <main+0x1d0>)
 8001492:	f7ff f9d1 	bl	8000838 <ESP8266_PTRu8SocketSendData>
 8001496:	60f8      	str	r0, [r7, #12]
		if(Global_RecordCompleteflag==1)
 8001498:	e7ce      	b.n	8001438 <main+0x13c>
 800149a:	bf00      	nop
 800149c:	080012c9 	.word	0x080012c9
 80014a0:	08001618 	.word	0x08001618
 80014a4:	08001624 	.word	0x08001624
 80014a8:	08001630 	.word	0x08001630
 80014ac:	08001638 	.word	0x08001638
 80014b0:	08001644 	.word	0x08001644
 80014b4:	08001648 	.word	0x08001648
 80014b8:	08001654 	.word	0x08001654
 80014bc:	08001658 	.word	0x08001658
 80014c0:	2000002c 	.word	0x2000002c
 80014c4:	200000ac 	.word	0x200000ac
 80014c8:	0800165c 	.word	0x0800165c
 80014cc:	08001660 	.word	0x08001660

080014d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014d6:	490e      	ldr	r1, [pc, #56]	; (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ec:	4c0b      	ldr	r4, [pc, #44]	; (800151c <LoopForever+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014fa:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80014fe:	f000 f811 	bl	8001524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fefb 	bl	80012fc <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   r0, =_estack
 8001508:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001514:	08001674 	.word	0x08001674
  ldr r2, =_sbss
 8001518:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800151c:	200000ec 	.word	0x200000ec

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <__libc_init_array>:
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	2500      	movs	r5, #0
 8001528:	4e0c      	ldr	r6, [pc, #48]	; (800155c <__libc_init_array+0x38>)
 800152a:	4c0d      	ldr	r4, [pc, #52]	; (8001560 <__libc_init_array+0x3c>)
 800152c:	1ba4      	subs	r4, r4, r6
 800152e:	10a4      	asrs	r4, r4, #2
 8001530:	42a5      	cmp	r5, r4
 8001532:	d109      	bne.n	8001548 <__libc_init_array+0x24>
 8001534:	f000 f81a 	bl	800156c <_init>
 8001538:	2500      	movs	r5, #0
 800153a:	4e0a      	ldr	r6, [pc, #40]	; (8001564 <__libc_init_array+0x40>)
 800153c:	4c0a      	ldr	r4, [pc, #40]	; (8001568 <__libc_init_array+0x44>)
 800153e:	1ba4      	subs	r4, r4, r6
 8001540:	10a4      	asrs	r4, r4, #2
 8001542:	42a5      	cmp	r5, r4
 8001544:	d105      	bne.n	8001552 <__libc_init_array+0x2e>
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800154c:	4798      	blx	r3
 800154e:	3501      	adds	r5, #1
 8001550:	e7ee      	b.n	8001530 <__libc_init_array+0xc>
 8001552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001556:	4798      	blx	r3
 8001558:	3501      	adds	r5, #1
 800155a:	e7f2      	b.n	8001542 <__libc_init_array+0x1e>
 800155c:	0800166c 	.word	0x0800166c
 8001560:	0800166c 	.word	0x0800166c
 8001564:	0800166c 	.word	0x0800166c
 8001568:	08001670 	.word	0x08001670

0800156c <_init>:
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156e:	bf00      	nop
 8001570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	469e      	mov	lr, r3
 8001576:	4770      	bx	lr

08001578 <_fini>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	bf00      	nop
 800157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157e:	bc08      	pop	{r3}
 8001580:	469e      	mov	lr, r3
 8001582:	4770      	bx	lr
