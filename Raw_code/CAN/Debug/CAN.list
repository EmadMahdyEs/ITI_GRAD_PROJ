
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb0  08000cb0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000008  08000cc0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08000cc0  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018d5  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006c0  00000000  00000000  00021906  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000240  00000000  00000000  00021fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d8  00000000  00000000  00022208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010ff  00000000  00000000  000223e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000aaf  00000000  00000000  000234df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005585  00000000  00000000  00023f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00029513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007dc  00000000  00000000  00029590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c98 	.word	0x08000c98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000c98 	.word	0x08000c98

08000170 <CAN_voidFilterConfiguration>:
									FILTER_MODE_t Filter_Mode,
									FILTER_SCALE_REGISTER_t Filter_Scale,
									FILTER_ASSIGNMENT_t Filter_Assignment,
									u32 Identifier_1, u32 Mask_Identifier_2,
									CAN_STATUS_t Activtion_status)
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]

	// enter filter initialization mode by setting FINIT bit
	SET_BIT(CAN1->CAN_FMR, FINIT_BIT);
 800018e:	4b35      	ldr	r3, [pc, #212]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000194:	4a33      	ldr	r2, [pc, #204]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000196:	f043 0301 	orr.w	r3, r3, #1
 800019a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	// set the mode of the filter bank
	// 0: Mask Mode 1: List Mode
	INS_BIT(CAN1->CAN_FM1R, Filter_Bank_number, Filter_Mode);
 800019e:	4b31      	ldr	r3, [pc, #196]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80001a4:	79fa      	ldrb	r2, [r7, #7]
 80001a6:	2101      	movs	r1, #1
 80001a8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ac:	43d2      	mvns	r2, r2
 80001ae:	4013      	ands	r3, r2
 80001b0:	79b9      	ldrb	r1, [r7, #6]
 80001b2:	79fa      	ldrb	r2, [r7, #7]
 80001b4:	fa01 f202 	lsl.w	r2, r1, r2
 80001b8:	4611      	mov	r1, r2
 80001ba:	4a2a      	ldr	r2, [pc, #168]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001bc:	430b      	orrs	r3, r1
 80001be:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	// set the Scale of the filter bank
	// 0: Dual 16-bit 1: Single 32-bit
	INS_BIT(CAN1->CAN_FS1R, Filter_Bank_number, Filter_Scale);
 80001c2:	4b28      	ldr	r3, [pc, #160]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80001c8:	79fa      	ldrb	r2, [r7, #7]
 80001ca:	2101      	movs	r1, #1
 80001cc:	fa01 f202 	lsl.w	r2, r1, r2
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	4013      	ands	r3, r2
 80001d4:	7979      	ldrb	r1, [r7, #5]
 80001d6:	79fa      	ldrb	r2, [r7, #7]
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	4611      	mov	r1, r2
 80001de:	4a21      	ldr	r2, [pc, #132]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001e0:	430b      	orrs	r3, r1
 80001e2:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

	// set the FIFO
	// 0: FIFO_0 1: FIFO_1
	INS_BIT(CAN1->CAN_FFA1R, Filter_Bank_number, Filter_Assignment);
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 80001e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	2101      	movs	r1, #1
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4013      	ands	r3, r2
 80001f8:	7939      	ldrb	r1, [r7, #4]
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000200:	4611      	mov	r1, r2
 8000202:	4a18      	ldr	r2, [pc, #96]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000204:	430b      	orrs	r3, r1
 8000206:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	// assign identifiers Value
	CAN1->FILTER_BANK[Filter_Bank_number].FxR1 = Identifier_1;
 800020a:	4916      	ldr	r1, [pc, #88]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	3348      	adds	r3, #72	; 0x48
 8000210:	693a      	ldr	r2, [r7, #16]
 8000212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	CAN1->FILTER_BANK[Filter_Bank_number].FxR2 = Mask_Identifier_2;
 8000216:	4a13      	ldr	r2, [pc, #76]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	3348      	adds	r3, #72	; 0x48
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	4413      	add	r3, r2
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	605a      	str	r2, [r3, #4]

	// Activation Status
	INS_BIT(CAN1->CAN_FA1R, Filter_Bank_number, Activtion_status);
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000226:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800022a:	79fa      	ldrb	r2, [r7, #7]
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	4013      	ands	r3, r2
 8000236:	7e39      	ldrb	r1, [r7, #24]
 8000238:	79fa      	ldrb	r2, [r7, #7]
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000242:	430b      	orrs	r3, r1
 8000244:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	// enter Active Filter Mode mode by Clearing FINIT bit
	CLR_BIT(CAN1->CAN_FMR, FINIT_BIT);
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 800024a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800024e:	4a05      	ldr	r2, [pc, #20]	; (8000264 <CAN_voidFilterConfiguration+0xf4>)
 8000250:	f023 0301 	bic.w	r3, r3, #1
 8000254:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bc90      	pop	{r4, r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40006400 	.word	0x40006400

08000268 <CAN_u32GetProperFilterValues>:
 take the values of filters and format them in the proper form
 used with 32-bit scale only
 ***************************************************/

u32 CAN_u32GetProperFilterValues(u16 std_id_part, u32 extended_id_part, u8 IDE_value, u8 RTR_value)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6039      	str	r1, [r7, #0]
 8000270:	4611      	mov	r1, r2
 8000272:	461a      	mov	r2, r3
 8000274:	4603      	mov	r3, r0
 8000276:	80fb      	strh	r3, [r7, #6]
 8000278:	460b      	mov	r3, r1
 800027a:	717b      	strb	r3, [r7, #5]
 800027c:	4613      	mov	r3, r2
 800027e:	713b      	strb	r3, [r7, #4]
	// byte 1              byte 2              byte 3          byte 4
	// stdid[10:3]  stdid[2:0] extid[17:13]  extid[12:5]   extid[4:0] IDE RTR  0

	u32 local = std_id_part << 21 | extended_id_part << 3 | IDE_value << 2
 8000280:	88fb      	ldrh	r3, [r7, #6]
 8000282:	055b      	lsls	r3, r3, #21
 8000284:	461a      	mov	r2, r3
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	00db      	lsls	r3, r3, #3
 800028a:	4313      	orrs	r3, r2
 800028c:	797a      	ldrb	r2, [r7, #5]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	4313      	orrs	r3, r2
			| RTR_value << 1;
 8000292:	793a      	ldrb	r2, [r7, #4]
 8000294:	0052      	lsls	r2, r2, #1
	u32 local = std_id_part << 21 | extended_id_part << 3 | IDE_value << 2
 8000296:	4313      	orrs	r3, r2
 8000298:	60fb      	str	r3, [r7, #12]
	return local;
 800029a:	68fb      	ldr	r3, [r7, #12]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
	...

080002a8 <CAN_voidInit>:
 and to set the bit timing
 --> if operating mode is not set to Normal at the end of this function use it explicitly
 *****************************************************************/

void CAN_voidInit(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	// concatenate the values in the configuration file
	// corresponding to the MCR_register "CAN master Control"
	u32 value = CONC_MCR(CAN_TIME_TRIGGERED_COMMUNICATION_MODE,
 80002ae:	2307      	movs	r3, #7
 80002b0:	607b      	str	r3, [r7, #4]
			CAN_WAKE_UP_MANAGMENT,
			CAN_NO_RETRANSMISSION,
			CAN_RECEIVE_FIFO_LOCKED_MODE,
			CAN_TRANSMIT_FIFO_PRIORITY);

	CAN1->CAN_MCR = (CAN_WORKING_IN_DEBUG << 16) | (value << 2);
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <CAN_voidInit+0x44>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	6013      	str	r3, [r2, #0]

	// enter initialization mode to be able to set the bit timings
	CAN_voidOperatingMode(CAN_OPERATING_MODE_INITIALIZATION);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f000 f818 	bl	80002f0 <CAN_voidOperatingMode>

	// set the bit timing
	CAN_voidSetTiming();
 80002c0:	f000 f87e 	bl	80003c0 <CAN_voidSetTiming>

	// test mode if used
	INS_BIT(CAN1->CAN_BTR, LBKM_BIT, CAN_LOOPBACK_MODE);
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <CAN_voidInit+0x44>)
 80002c6:	69db      	ldr	r3, [r3, #28]
 80002c8:	4a08      	ldr	r2, [pc, #32]	; (80002ec <CAN_voidInit+0x44>)
 80002ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002ce:	61d3      	str	r3, [r2, #28]
	INS_BIT(CAN1->CAN_BTR, SILM_BIT, CAN_SILENT_MODE);
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <CAN_voidInit+0x44>)
 80002d2:	69db      	ldr	r3, [r3, #28]
 80002d4:	4a05      	ldr	r2, [pc, #20]	; (80002ec <CAN_voidInit+0x44>)
 80002d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80002da:	61d3      	str	r3, [r2, #28]

	CAN_voidOperatingMode(CAN_OPERATING_MODE_NORMAL);
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 f807 	bl	80002f0 <CAN_voidOperatingMode>

}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40006400 	.word	0x40006400

080002f0 <CAN_voidOperatingMode>:
/********************************************************
 * Choose the operating mode for the can
 * then wait for the hardware to ack
 *******************************************************/
void CAN_voidOperatingMode(CAN_OPERATING_MODE_t Operating_Mode)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	switch (Operating_Mode)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d020      	beq.n	8000342 <CAN_voidOperatingMode+0x52>
 8000300:	2b02      	cmp	r3, #2
 8000302:	d03a      	beq.n	800037a <CAN_voidOperatingMode+0x8a>
 8000304:	2b00      	cmp	r3, #0
 8000306:	d000      	beq.n	800030a <CAN_voidOperatingMode+0x1a>
			// wait for hardware to ack
			while (GET_BIT(CAN1->CAN_MSR, INRQ_BIT)); // wait till zero
			while (GET_BIT(CAN1->CAN_MSR,SLEEP_BIT) == 0); // wait till one
			break;
	}
}
 8000308:	e053      	b.n	80003b2 <CAN_voidOperatingMode+0xc2>
			CLR_BIT(CAN1->CAN_MCR, INRQ_BIT);
 800030a:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000310:	f023 0301 	bic.w	r3, r3, #1
 8000314:	6013      	str	r3, [r2, #0]
			CLR_BIT(CAN1->CAN_MCR, SLEEP_BIT);
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a28      	ldr	r2, [pc, #160]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800031c:	f023 0302 	bic.w	r3, r3, #2
 8000320:	6013      	str	r3, [r2, #0]
			while (GET_BIT(CAN1->CAN_MSR, INRQ_BIT)); // wait till zero
 8000322:	bf00      	nop
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d1f9      	bne.n	8000324 <CAN_voidOperatingMode+0x34>
			while (GET_BIT(CAN1->CAN_MSR, SLEEP_BIT)); // wait till zero
 8000330:	bf00      	nop
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	085b      	lsrs	r3, r3, #1
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f8      	bne.n	8000332 <CAN_voidOperatingMode+0x42>
			break;
 8000340:	e037      	b.n	80003b2 <CAN_voidOperatingMode+0xc2>
			SET_BIT(CAN1->CAN_MCR, INRQ_BIT);
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6013      	str	r3, [r2, #0]
			CLR_BIT(CAN1->CAN_MCR, SLEEP_BIT);
 800034e:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000354:	f023 0302 	bic.w	r3, r3, #2
 8000358:	6013      	str	r3, [r2, #0]
			while (GET_BIT(CAN1->CAN_MSR,INRQ_BIT) == 0); // wait till one
 800035a:	bf00      	nop
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <CAN_voidOperatingMode+0x6c>
			while (GET_BIT(CAN1->CAN_MSR, SLEEP_BIT)); // wait till zero
 8000368:	bf00      	nop
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	085b      	lsrs	r3, r3, #1
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1f8      	bne.n	800036a <CAN_voidOperatingMode+0x7a>
			break;
 8000378:	e01b      	b.n	80003b2 <CAN_voidOperatingMode+0xc2>
			CLR_BIT(CAN1->CAN_MCR, INRQ_BIT);
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]
			SET_BIT(CAN1->CAN_MCR, SLEEP_BIT);
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	6013      	str	r3, [r2, #0]
			while (GET_BIT(CAN1->CAN_MSR, INRQ_BIT)); // wait till zero
 8000392:	bf00      	nop
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d1f9      	bne.n	8000394 <CAN_voidOperatingMode+0xa4>
			while (GET_BIT(CAN1->CAN_MSR,SLEEP_BIT) == 0); // wait till one
 80003a0:	bf00      	nop
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <CAN_voidOperatingMode+0xcc>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	085b      	lsrs	r3, r3, #1
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f8      	beq.n	80003a2 <CAN_voidOperatingMode+0xb2>
			break;
 80003b0:	bf00      	nop
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40006400 	.word	0x40006400

080003c0 <CAN_voidSetTiming>:

static void CAN_voidSetTiming(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	// set the value of the baudrate which is used to determine
	// the time quanta
	// field start at bit 0 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0x3FF, 0, CAN_BAUD_RATE_PRESCALER);
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80003cc:	f023 0303 	bic.w	r3, r3, #3
 80003d0:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003d2:	3301      	adds	r3, #1
 80003d4:	61d3      	str	r3, [r2, #28]

	// number of time segment 1 which is a multiple of time quanta
	// field start at bit 16 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0xF, 16, CAN_TIME_SIGMENT_1);
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003de:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003e0:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 80003e4:	61d3      	str	r3, [r2, #28]

	// number of time segment 2 which is a multiple of time quanta
	// field start at bit 20 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0x7, 20, CAN_TIME_SIGMENT_2);
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003f0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80003f4:	61d3      	str	r3, [r2, #28]

	// maximum number of time quanta the CAN hardware is allowed to
	// lengthen or shorten a bit to perform the resynchronization.
	// field start at bit 24 in CAN_BTR register
	INS_FIELD(CAN1->CAN_BTR, 0x3, 24, CAN_RESYNC_JUMP_WIDTH);
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <CAN_voidSetTiming+0x50>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003fe:	4a04      	ldr	r2, [pc, #16]	; (8000410 <CAN_voidSetTiming+0x50>)
 8000400:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40006400 	.word	0x40006400

08000414 <CAN_voidInterruptStatus>:

/*****************************************
 Activate the required event interrupt
 *****************************************/
void CAN_voidInterruptStatus(CAN_INERRUPT_EVENTS_t Event, CAN_STATUS_t Status)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]
	INS_BIT(CAN1->CAN_IER, Event, Status);
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <CAN_voidInterruptStatus+0x3c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	43d2      	mvns	r2, r2
 8000432:	4013      	ands	r3, r2
 8000434:	79b9      	ldrb	r1, [r7, #6]
 8000436:	79fa      	ldrb	r2, [r7, #7]
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	4611      	mov	r1, r2
 800043e:	4a04      	ldr	r2, [pc, #16]	; (8000450 <CAN_voidInterruptStatus+0x3c>)
 8000440:	430b      	orrs	r3, r1
 8000442:	6153      	str	r3, [r2, #20]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40006400 	.word	0x40006400

08000454 <CAN_TransmitMailBox>:
 ***************************************************/
void CAN_TransmitMailBox(u8 MailBoxNum, u8 Data_length, u8 *Data,
							u32 identifier, u8 identifier_type,
							u8 frame_type
							)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	4603      	mov	r3, r0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	460b      	mov	r3, r1
 8000464:	73bb      	strb	r3, [r7, #14]
	// byte 1              byte 2              byte 3          byte 4
	// stdid[10:3]  stdid[2:0] extid[17:13]  extid[12:5]   extid[4:0] IDE RTR  TXRQ
//  -------------------------------------------------------------------------------

	// wait for the required transmitting mail box to be empty
	while ( GET_BIT(CAN1->CAN_TSR,(26+MailBoxNum) ) == 0);
 8000466:	bf00      	nop
 8000468:	4b34      	ldr	r3, [pc, #208]	; (800053c <CAN_TransmitMailBox+0xe8>)
 800046a:	689a      	ldr	r2, [r3, #8]
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	331a      	adds	r3, #26
 8000470:	fa22 f303 	lsr.w	r3, r2, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f5      	beq.n	8000468 <CAN_TransmitMailBox+0x14>

	// must use the identifier format function to avoid any errors
	CAN1->TX_MAILBOX[MailBoxNum].CAN_TIR = identifier;
 800047c:	4a2f      	ldr	r2, [pc, #188]	; (800053c <CAN_TransmitMailBox+0xe8>)
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	3318      	adds	r3, #24
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	4413      	add	r3, r2
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]

	// length of the data to be sent
	INS_FIELD(CAN1->TX_MAILBOX[MailBoxNum].CAN_TDTR, 0xF, 0, Data_length);
 800048a:	4a2c      	ldr	r2, [pc, #176]	; (800053c <CAN_TransmitMailBox+0xe8>)
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	3318      	adds	r3, #24
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	4413      	add	r3, r2
 8000494:	3304      	adds	r3, #4
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f023 010f 	bic.w	r1, r3, #15
 800049c:	7bba      	ldrb	r2, [r7, #14]
 800049e:	4827      	ldr	r0, [pc, #156]	; (800053c <CAN_TransmitMailBox+0xe8>)
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	440a      	add	r2, r1
 80004a4:	3318      	adds	r3, #24
 80004a6:	011b      	lsls	r3, r3, #4
 80004a8:	4403      	add	r3, r0
 80004aa:	3304      	adds	r3, #4
 80004ac:	601a      	str	r2, [r3, #0]

	// lower 4 bytes of data
	CAN1->TX_MAILBOX[MailBoxNum].CAN_TDLR = Data[3] << 24 | Data[2] << 16
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	3303      	adds	r3, #3
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	061a      	lsls	r2, r3, #24
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	3302      	adds	r3, #2
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	041b      	lsls	r3, r3, #16
 80004be:	431a      	orrs	r2, r3
			| Data[1] << 8 | Data[0];
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	3301      	adds	r3, #1
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	4313      	orrs	r3, r2
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	ea43 0102 	orr.w	r1, r3, r2
	CAN1->TX_MAILBOX[MailBoxNum].CAN_TDLR = Data[3] << 24 | Data[2] << 16
 80004d2:	4a1a      	ldr	r2, [pc, #104]	; (800053c <CAN_TransmitMailBox+0xe8>)
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	4413      	add	r3, r2
 80004da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80004de:	6019      	str	r1, [r3, #0]

	// higher 4 bytes of data
	CAN1->TX_MAILBOX[MailBoxNum].CAN_TDHR = Data[7] << 24 | Data[6] << 16
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3307      	adds	r3, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	061a      	lsls	r2, r3, #24
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	3306      	adds	r3, #6
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	041b      	lsls	r3, r3, #16
 80004f0:	431a      	orrs	r2, r3
			| Data[5] << 8 | Data[4];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	3305      	adds	r3, #5
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	021b      	lsls	r3, r3, #8
 80004fa:	4313      	orrs	r3, r2
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	3204      	adds	r2, #4
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	ea43 0102 	orr.w	r1, r3, r2
	CAN1->TX_MAILBOX[MailBoxNum].CAN_TDHR = Data[7] << 24 | Data[6] << 16
 8000506:	4a0d      	ldr	r2, [pc, #52]	; (800053c <CAN_TransmitMailBox+0xe8>)
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	4413      	add	r3, r2
 800050e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000512:	6019      	str	r1, [r3, #0]

	// request transmitting
	SET_BIT(CAN1->TX_MAILBOX[MailBoxNum].CAN_TIR, 0);
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <CAN_TransmitMailBox+0xe8>)
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3318      	adds	r3, #24
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	4413      	add	r3, r2
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4906      	ldr	r1, [pc, #24]	; (800053c <CAN_TransmitMailBox+0xe8>)
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	f042 0201 	orr.w	r2, r2, #1
 8000528:	3318      	adds	r3, #24
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	440b      	add	r3, r1
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40006400 	.word	0x40006400

08000540 <CAN_voidReceiveMailBox>:

 --> need to pass a pointer to the Rx_header struct to receive related data
 --> pass the pointer to the buffer
 *******************************************************************/
void CAN_voidReceiveMailBox(u8 FIFO_num, RX_Struct_t *RX_Header, u8 *Rx_Data)
{
 8000540:	b480      	push	{r7}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
 800054c:	73fb      	strb	r3, [r7, #15]

	// get the length of the incoming data
	RX_Header->Data_length = CAN1->RX_MAILBOX[FIFO_num].CAN_RDTR & 0xF;
 800054e:	4a63      	ldr	r2, [pc, #396]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	331b      	adds	r3, #27
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	4413      	add	r3, r2
 8000558:	3304      	adds	r3, #4
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	b2da      	uxtb	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	701a      	strb	r2, [r3, #0]

	// get the identifier type
	RX_Header->Identifier_type = GET_BIT(CAN1->RX_MAILBOX[FIFO_num].CAN_RIR, 2);
 8000568:	4a5c      	ldr	r2, [pc, #368]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	331b      	adds	r3, #27
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	4413      	add	r3, r2
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	089b      	lsrs	r3, r3, #2
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	721a      	strb	r2, [r3, #8]

	u32 local_extarcted_std_id = (CAN1->RX_MAILBOX[FIFO_num].CAN_RIR >> 21)
 8000582:	4a56      	ldr	r2, [pc, #344]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	331b      	adds	r3, #27
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	4413      	add	r3, r2
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	0d5b      	lsrs	r3, r3, #21
 8000590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000594:	617b      	str	r3, [r7, #20]
			& 0x7FF;	// needs only 11-bit
	u32 local_extarcted_extended_id = (CAN1->RX_MAILBOX[FIFO_num].CAN_RIR >> 3)
 8000596:	4a51      	ldr	r2, [pc, #324]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	331b      	adds	r3, #27
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	4413      	add	r3, r2
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80005a8:	613b      	str	r3, [r7, #16]
			& 0x3FFFF;	// needs only 18-bit

	if (RX_Header->Identifier_type) //standard
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	7a1b      	ldrb	r3, [r3, #8]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <CAN_voidReceiveMailBox+0x7a>
	{
		RX_Header->Identifier = local_extarcted_std_id;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	697a      	ldr	r2, [r7, #20]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	e005      	b.n	80005c6 <CAN_voidReceiveMailBox+0x86>
	}
	else // extended
	{
		RX_Header->Identifier = (local_extarcted_std_id << 18)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	049a      	lsls	r2, r3, #18
				| local_extarcted_extended_id;
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	431a      	orrs	r2, r3
		RX_Header->Identifier = (local_extarcted_std_id << 18)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	605a      	str	r2, [r3, #4]
	}

	// index of the filter data passed through
	RX_Header->Filter_Index = (CAN1->RX_MAILBOX[FIFO_num].CAN_RDTR) >> 8 & 0xFF;
 80005c6:	4a45      	ldr	r2, [pc, #276]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	331b      	adds	r3, #27
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	4413      	add	r3, r2
 80005d0:	3304      	adds	r3, #4
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	729a      	strb	r2, [r3, #10]

	// get the frame type
	RX_Header->Frame_type = GET_BIT(CAN1->RX_MAILBOX[FIFO_num].CAN_RIR, 1);
 80005dc:	4a3f      	ldr	r2, [pc, #252]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	331b      	adds	r3, #27
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	4413      	add	r3, r2
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	725a      	strb	r2, [r3, #9]

	Rx_Data[0] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDLR >> 0;
 80005f6:	4a39      	ldr	r2, [pc, #228]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	4413      	add	r3, r2
 80005fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	701a      	strb	r2, [r3, #0]
	Rx_Data[1] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDLR >> 8;
 800060a:	4a34      	ldr	r2, [pc, #208]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	4413      	add	r3, r2
 8000612:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	0a1a      	lsrs	r2, r3, #8
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	701a      	strb	r2, [r3, #0]
	Rx_Data[2] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDLR >> 16;
 8000622:	4a2e      	ldr	r2, [pc, #184]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	4413      	add	r3, r2
 800062a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	0c1a      	lsrs	r2, r3, #16
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3302      	adds	r3, #2
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	701a      	strb	r2, [r3, #0]
	Rx_Data[3] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDLR >> 24;
 800063a:	4a28      	ldr	r2, [pc, #160]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	4413      	add	r3, r2
 8000642:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	0e1a      	lsrs	r2, r3, #24
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3303      	adds	r3, #3
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	701a      	strb	r2, [r3, #0]

	Rx_Data[4] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDHR >> 0;
 8000652:	4a22      	ldr	r2, [pc, #136]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	4413      	add	r3, r2
 800065a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3304      	adds	r3, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
	Rx_Data[5] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDHR >> 8;
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	4413      	add	r3, r2
 8000670:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	0a1a      	lsrs	r2, r3, #8
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3305      	adds	r3, #5
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	701a      	strb	r2, [r3, #0]
	Rx_Data[6] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDHR >> 16;
 8000680:	4a16      	ldr	r2, [pc, #88]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	4413      	add	r3, r2
 8000688:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	0c1a      	lsrs	r2, r3, #16
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3306      	adds	r3, #6
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	701a      	strb	r2, [r3, #0]
	Rx_Data[7] = CAN1->RX_MAILBOX[FIFO_num].CAN_RDHR >> 24;
 8000698:	4a10      	ldr	r2, [pc, #64]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	011b      	lsls	r3, r3, #4
 800069e:	4413      	add	r3, r2
 80006a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	0e1a      	lsrs	r2, r3, #24
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3307      	adds	r3, #7
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	701a      	strb	r2, [r3, #0]

	if (FIFO_num)
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d006      	beq.n	80006c4 <CAN_voidReceiveMailBox+0x184>
	{
		SET_BIT(CAN1->CAN_RF1R, 5);
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	6113      	str	r3, [r2, #16]
	else
	{
		SET_BIT(CAN1->CAN_RF0R, 5);
	}

}
 80006c2:	e005      	b.n	80006d0 <CAN_voidReceiveMailBox+0x190>
		SET_BIT(CAN1->CAN_RF0R, 5);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <CAN_voidReceiveMailBox+0x19c>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	371c      	adds	r7, #28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40006400 	.word	0x40006400

080006e0 <MGPIO_voidSetPinDirection>:
}

void MGPIO_voidSetPinDirection(GPIO_PORT copy_u8Port, u8 copy_u8Pin,
								GPIO_MODE copy_u8Mode,
								GPIO_CONFIGURATION copy_u8CNFG)
{
 80006e0:	b490      	push	{r4, r7}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4604      	mov	r4, r0
 80006e8:	4608      	mov	r0, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4623      	mov	r3, r4
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	4603      	mov	r3, r0
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	460b      	mov	r3, r1
 80006f8:	717b      	strb	r3, [r7, #5]
 80006fa:	4613      	mov	r3, r2
 80006fc:	713b      	strb	r3, [r7, #4]
	u8 field = (copy_u8CNFG << 2) + copy_u8Mode;
 80006fe:	793b      	ldrb	r3, [r7, #4]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b2da      	uxtb	r2, r3
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	4413      	add	r3, r2
 8000708:	73fb      	strb	r3, [r7, #15]
	if (copy_u8Pin < 8)
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	2b07      	cmp	r3, #7
 800070e:	d841      	bhi.n	8000794 <MGPIO_voidSetPinDirection+0xb4>
	{
		switch (copy_u8Port)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d017      	beq.n	8000746 <MGPIO_voidSetPinDirection+0x66>
 8000716:	2b02      	cmp	r3, #2
 8000718:	d028      	beq.n	800076c <MGPIO_voidSetPinDirection+0x8c>
 800071a:	2b00      	cmp	r3, #0
 800071c:	d000      	beq.n	8000720 <MGPIO_voidSetPinDirection+0x40>
						field);
				break;

		}
	}
}
 800071e:	e086      	b.n	800082e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 8000720:	4b45      	ldr	r3, [pc, #276]	; (8000838 <MGPIO_voidSetPinDirection+0x158>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	210f      	movs	r1, #15
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	4013      	ands	r3, r2
 8000732:	7bf9      	ldrb	r1, [r7, #15]
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a3e      	ldr	r2, [pc, #248]	; (8000838 <MGPIO_voidSetPinDirection+0x158>)
 8000740:	440b      	add	r3, r1
 8000742:	6013      	str	r3, [r2, #0]
				break;
 8000744:	e073      	b.n	800082e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <MGPIO_voidSetPinDirection+0x15c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	210f      	movs	r1, #15
 8000750:	fa01 f202 	lsl.w	r2, r1, r2
 8000754:	43d2      	mvns	r2, r2
 8000756:	4013      	ands	r3, r2
 8000758:	7bf9      	ldrb	r1, [r7, #15]
 800075a:	79ba      	ldrb	r2, [r7, #6]
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	fa01 f202 	lsl.w	r2, r1, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4a35      	ldr	r2, [pc, #212]	; (800083c <MGPIO_voidSetPinDirection+0x15c>)
 8000766:	440b      	add	r3, r1
 8000768:	6013      	str	r3, [r2, #0]
				break;
 800076a:	e060      	b.n	800082e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 800076c:	4b34      	ldr	r3, [pc, #208]	; (8000840 <MGPIO_voidSetPinDirection+0x160>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	210f      	movs	r1, #15
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	43d2      	mvns	r2, r2
 800077c:	4013      	ands	r3, r2
 800077e:	7bf9      	ldrb	r1, [r7, #15]
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	0092      	lsls	r2, r2, #2
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <MGPIO_voidSetPinDirection+0x160>)
 800078c:	440b      	add	r3, r1
 800078e:	6013      	str	r3, [r2, #0]
				break;
 8000790:	bf00      	nop
 8000792:	e04c      	b.n	800082e <MGPIO_voidSetPinDirection+0x14e>
	else if (copy_u8Pin >= 8 && copy_u8Pin < 16)
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	2b07      	cmp	r3, #7
 8000798:	d949      	bls.n	800082e <MGPIO_voidSetPinDirection+0x14e>
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d846      	bhi.n	800082e <MGPIO_voidSetPinDirection+0x14e>
		switch (copy_u8Port)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d019      	beq.n	80007da <MGPIO_voidSetPinDirection+0xfa>
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d02c      	beq.n	8000804 <MGPIO_voidSetPinDirection+0x124>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d000      	beq.n	80007b0 <MGPIO_voidSetPinDirection+0xd0>
}
 80007ae:	e03e      	b.n	800082e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MGPIO_voidSetPinDirection+0x158>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	79ba      	ldrb	r2, [r7, #6]
 80007b6:	3a08      	subs	r2, #8
 80007b8:	0092      	lsls	r2, r2, #2
 80007ba:	210f      	movs	r1, #15
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	4013      	ands	r3, r2
 80007c4:	7bf9      	ldrb	r1, [r7, #15]
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	3a08      	subs	r2, #8
 80007ca:	0092      	lsls	r2, r2, #2
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a19      	ldr	r2, [pc, #100]	; (8000838 <MGPIO_voidSetPinDirection+0x158>)
 80007d4:	440b      	add	r3, r1
 80007d6:	6053      	str	r3, [r2, #4]
				break;
 80007d8:	e029      	b.n	800082e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MGPIO_voidSetPinDirection+0x15c>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	79ba      	ldrb	r2, [r7, #6]
 80007e0:	3a08      	subs	r2, #8
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	210f      	movs	r1, #15
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	43d2      	mvns	r2, r2
 80007ec:	4013      	ands	r3, r2
 80007ee:	7bf9      	ldrb	r1, [r7, #15]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	3a08      	subs	r2, #8
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <MGPIO_voidSetPinDirection+0x15c>)
 80007fe:	440b      	add	r3, r1
 8000800:	6053      	str	r3, [r2, #4]
				break;
 8000802:	e014      	b.n	800082e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MGPIO_voidSetPinDirection+0x160>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	3a08      	subs	r2, #8
 800080c:	0092      	lsls	r2, r2, #2
 800080e:	210f      	movs	r1, #15
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	43d2      	mvns	r2, r2
 8000816:	4013      	ands	r3, r2
 8000818:	7bf9      	ldrb	r1, [r7, #15]
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	3a08      	subs	r2, #8
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	4611      	mov	r1, r2
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <MGPIO_voidSetPinDirection+0x160>)
 8000828:	440b      	add	r3, r1
 800082a:	6053      	str	r3, [r2, #4]
				break;
 800082c:	bf00      	nop
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bc90      	pop	{r4, r7}
 8000836:	4770      	bx	lr
 8000838:	40010800 	.word	0x40010800
 800083c:	40010c00 	.word	0x40010c00
 8000840:	40011000 	.word	0x40011000

08000844 <MNVIC_voidEnableInterrupt>:



/* to enable the interrupt */
void MNVIC_voidEnableInterrupt(u8 copy_ISRNumber)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_ISRNumber / 32] = 1 << (copy_ISRNumber % 32);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 031f 	and.w	r3, r3, #31
 8000854:	2201      	movs	r2, #1
 8000856:	fa02 f103 	lsl.w	r1, r2, r3
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <MNVIC_voidEnableInterrupt+0x2c>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	095b      	lsrs	r3, r3, #5
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100

08000874 <MRCC_voidInit>:
u32 RCC_AHB_Frequency;
u32 RCC_APB1_Frequency;
u32 RCC_APB2_Frequency;

void MRCC_voidInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	/* assign the system clock global variable*/
	RCC_F_CPU = RCC_SYSTEM_CLOCK;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MRCC_voidInit+0x44>)
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <MRCC_voidInit+0x48>)
 800087c:	601a      	str	r2, [r3, #0]

	/* assign the AHB frequency global variable*/
#if RCC_AHB_BUS_PRESCALER <=10
	RCC_AHB_Frequency = RCC_F_CPU >> (RCC_AHB_BUS_PRESCALER - 7);
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MRCC_voidInit+0x44>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <MRCC_voidInit+0x4c>)
 8000884:	6013      	str	r3, [r2, #0]
#else
	RCC_AHB_Frequency = RCC_F_CPU>>(RCC_AHB_BUS_PRESCALER-7+1);
#endif

	/* assign the APB1 & APB2 frequency global variable */
	RCC_APB1_Frequency = RCC_F_CPU >> (RCC_APB1_BUS_PRESCALER - 3);
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MRCC_voidInit+0x44>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <MRCC_voidInit+0x50>)
 800088c:	6013      	str	r3, [r2, #0]
	RCC_APB2_Frequency = RCC_F_CPU >> (RCC_APB2_BUS_PRESCALER - 3);
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MRCC_voidInit+0x44>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <MRCC_voidInit+0x54>)
 8000894:	6013      	str	r3, [r2, #0]

	MRCC_voidSetBusClocks(RCC_AHB_BUS_PRESCALER, RCC_APB1_BUS_PRESCALER,
 8000896:	2203      	movs	r2, #3
 8000898:	2103      	movs	r1, #3
 800089a:	2007      	movs	r0, #7
 800089c:	f000 f898 	bl	80009d0 <MRCC_voidSetBusClocks>
	SET_BIT(RCC->RCC_CFGR, 16); //PLLSRC
	INS_FIELD(RCC->RCC_CFGR, 0x1111, 18, (RCC_PLL_MUL_FACTOR-2));

#endif

	MRCC_voidEnableClockSource(RCC_SYSTEM_CLOCK_SOURCE, RCC_STATUS_ON);
 80008a0:	2101      	movs	r1, #1
 80008a2:	2011      	movs	r0, #17
 80008a4:	f000 f872 	bl	800098c <MRCC_voidEnableClockSource>

	MRCC_u8CheckClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80008a8:	2011      	movs	r0, #17
 80008aa:	f000 f80f 	bl	80008cc <MRCC_u8CheckClockSource>

	MRCC_voidSetClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80008ae:	2011      	movs	r0, #17
 80008b0:	f000 f840 	bl	8000934 <MRCC_voidSetClockSource>

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000002c 	.word	0x2000002c
 80008bc:	007a1200 	.word	0x007a1200
 80008c0:	20000034 	.word	0x20000034
 80008c4:	20000030 	.word	0x20000030
 80008c8:	20000038 	.word	0x20000038

080008cc <MRCC_u8CheckClockSource>:

u8 MRCC_u8CheckClockSource(RCC_CLOCK_SOURCE copy_u8CLK)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	u32 max_wait_time = 50000;
 80008d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80008da:	60fb      	str	r3, [r7, #12]
	u32 counter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
	u8 state = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	74fb      	strb	r3, [r7, #19]

	if ((copy_u8CLK != RCC_HSI) && (copy_u8CLK != RCC_HSE)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d011      	beq.n	800090e <MRCC_u8CheckClockSource+0x42>
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b11      	cmp	r3, #17
 80008ee:	d00e      	beq.n	800090e <MRCC_u8CheckClockSource+0x42>
			&& (copy_u8CLK != RCC_PLL)) state = 0;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b19      	cmp	r3, #25
 80008f4:	d00b      	beq.n	800090e <MRCC_u8CheckClockSource+0x42>
 80008f6:	2300      	movs	r3, #0
 80008f8:	74fb      	strb	r3, [r7, #19]
 80008fa:	e013      	b.n	8000924 <MRCC_u8CheckClockSource+0x58>
	else
	{
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
		{
			counter++;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
			state = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	74fb      	strb	r3, [r7, #19]
			if (counter == max_wait_time) break;
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	429a      	cmp	r2, r3
 800090c:	d009      	beq.n	8000922 <MRCC_u8CheckClockSource+0x56>
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MRCC_u8CheckClockSource+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0ed      	beq.n	80008fc <MRCC_u8CheckClockSource+0x30>
 8000920:	e000      	b.n	8000924 <MRCC_u8CheckClockSource+0x58>
			if (counter == max_wait_time) break;
 8000922:	bf00      	nop
		}
	}
	return state;
 8000924:	7cfb      	ldrb	r3, [r7, #19]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <MRCC_voidSetClockSource>:

void MRCC_voidSetClockSource(RCC_CLOCK_SOURCE copy_u8Source)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Source)
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b11      	cmp	r3, #17
 8000942:	d00b      	beq.n	800095c <MRCC_voidSetClockSource+0x28>
 8000944:	2b19      	cmp	r3, #25
 8000946:	d011      	beq.n	800096c <MRCC_voidSetClockSource+0x38>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d000      	beq.n	800094e <MRCC_voidSetClockSource+0x1a>
			break;
		case RCC_PLL:
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
			break;
	}
}
 800094c:	e016      	b.n	800097c <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 0);
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MRCC_voidSetClockSource+0x54>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <MRCC_voidSetClockSource+0x54>)
 8000954:	f023 0303 	bic.w	r3, r3, #3
 8000958:	6053      	str	r3, [r2, #4]
			break;
 800095a:	e00f      	b.n	800097c <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 1);
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MRCC_voidSetClockSource+0x54>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f023 0303 	bic.w	r3, r3, #3
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <MRCC_voidSetClockSource+0x54>)
 8000966:	3301      	adds	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
			break;
 800096a:	e007      	b.n	800097c <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MRCC_voidSetClockSource+0x54>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f023 0303 	bic.w	r3, r3, #3
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <MRCC_voidSetClockSource+0x54>)
 8000976:	3302      	adds	r3, #2
 8000978:	6053      	str	r3, [r2, #4]
			break;
 800097a:	bf00      	nop
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <MRCC_voidEnableClockSource>:

void MRCC_voidEnableClockSource(RCC_CLOCK_SOURCE copy_u8ClockSource,
		RCC_STATES copy_u8state)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
	// the insert function offset value is determined with the bus variable
	// which is specified in the interface file
	INS_BIT(RCC->RCC_CR, (copy_u8ClockSource - 1), copy_u8state); // source_ON bit
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MRCC_voidEnableClockSource+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	3a01      	subs	r2, #1
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	43d2      	mvns	r2, r2
 80009ac:	4013      	ands	r3, r2
 80009ae:	79b9      	ldrb	r1, [r7, #6]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	3a01      	subs	r2, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <MRCC_voidEnableClockSource+0x40>)
 80009bc:	430b      	orrs	r3, r1
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <MRCC_voidSetBusClocks>:

void MRCC_voidSetBusClocks(RCC_AHB_PRESCALER copy_AHB,
		RCC_APB_PRESCALER copy_APB1, RCC_APB_PRESCALER copy_APB2)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	460b      	mov	r3, r1
 80009dc:	71bb      	strb	r3, [r7, #6]
 80009de:	4613      	mov	r3, r2
 80009e0:	717b      	strb	r3, [r7, #5]
	// AHB prescaler is different 4-bits wide

	INS_FIELD(RCC->RCC_CFGR, 0b1111, 4, copy_AHB);
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MRCC_voidSetBusClocks+0x58>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	4611      	mov	r1, r2
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <MRCC_voidSetBusClocks+0x58>)
 80009f2:	440b      	add	r3, r1
 80009f4:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 8, copy_APB1);
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MRCC_voidSetBusClocks+0x58>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009fe:	79ba      	ldrb	r2, [r7, #6]
 8000a00:	0212      	lsls	r2, r2, #8
 8000a02:	4611      	mov	r1, r2
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <MRCC_voidSetBusClocks+0x58>)
 8000a06:	440b      	add	r3, r1
 8000a08:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 11, copy_APB2);
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MRCC_voidSetBusClocks+0x58>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a12:	797a      	ldrb	r2, [r7, #5]
 8000a14:	02d2      	lsls	r2, r2, #11
 8000a16:	4611      	mov	r1, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <MRCC_voidSetBusClocks+0x58>)
 8000a1a:	440b      	add	r3, r1
 8000a1c:	6053      	str	r3, [r2, #4]

}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <MRCC_voidSetPeripheralClock>:

void MRCC_voidSetPeripheralClock(RCC_BUS copy_u8Bus, u8 copy_u8PeripheralNum,
		RCC_STATES copy_periph_status)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	460b      	mov	r3, r1
 8000a38:	71bb      	strb	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
	// dis/enable the desired peripheral on the specified bus
	// the insert function ofset value is determened with the bus variable
	// which is specified in the interface file
	if (copy_u8Bus == RCC_AHB_BUS)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d110      	bne.n	8000a66 <MRCC_voidSetPeripheralClock+0x3a>
	{
		INS_BIT(RCC->RCC_AHBENR, copy_u8PeripheralNum, copy_periph_status);
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MRCC_voidSetPeripheralClock+0x94>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	79ba      	ldrb	r2, [r7, #6]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a50:	43d2      	mvns	r2, r2
 8000a52:	4013      	ands	r3, r2
 8000a54:	7979      	ldrb	r1, [r7, #5]
 8000a56:	79ba      	ldrb	r2, [r7, #6]
 8000a58:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MRCC_voidSetPeripheralClock+0x94>)
 8000a60:	430b      	orrs	r3, r1
 8000a62:	6153      	str	r3, [r2, #20]
	}
	else if (copy_u8Bus == RCC_APB2_BUS)
	{
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
	}
}
 8000a64:	e026      	b.n	8000ab4 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB1_BUS)
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	d110      	bne.n	8000a8e <MRCC_voidSetPeripheralClock+0x62>
		INS_BIT(RCC->RCC_APB1ENR, copy_u8PeripheralNum, copy_periph_status);
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MRCC_voidSetPeripheralClock+0x94>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	43d2      	mvns	r2, r2
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	7979      	ldrb	r1, [r7, #5]
 8000a7e:	79ba      	ldrb	r2, [r7, #6]
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <MRCC_voidSetPeripheralClock+0x94>)
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	61d3      	str	r3, [r2, #28]
}
 8000a8c:	e012      	b.n	8000ab4 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB2_BUS)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b0b      	cmp	r3, #11
 8000a92:	d10f      	bne.n	8000ab4 <MRCC_voidSetPeripheralClock+0x88>
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MRCC_voidSetPeripheralClock+0x94>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	79ba      	ldrb	r2, [r7, #6]
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	43d2      	mvns	r2, r2
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	7979      	ldrb	r1, [r7, #5]
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aac:	4611      	mov	r1, r2
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <MRCC_voidSetPeripheralClock+0x94>)
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6193      	str	r3, [r2, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if (SYSTICK_ISR_TYPE_PERIODIC == 0)
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <SysTick_Handler+0x3c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d111      	bne.n	8000af4 <SysTick_Handler+0x30>
	{
		// disable systick
		CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <SysTick_Handler+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <SysTick_Handler+0x40>)
 8000ad6:	f023 0301 	bic.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]

		// disable Int
		CLR_BIT(SYSTICK->STK_CTRL, 1);
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <SysTick_Handler+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <SysTick_Handler+0x40>)
 8000ae2:	f023 0302 	bic.w	r3, r3, #2
 8000ae6:	6013      	str	r3, [r2, #0]

		// load value then clear current value
		SYSTICK->STK_LOAD = 0;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SysTick_Handler+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
		SYSTICK->STK_VAL = 0;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Handler+0x40>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
	}

	SYSTICK_CALLBACK();
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Handler+0x44>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4798      	blx	r3

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000028 	.word	0x20000028
 8000b04:	e000e010 	.word	0xe000e010
 8000b08:	20000024 	.word	0x20000024

08000b0c <USB_LP_CAN_RX0_IRQHandler>:
u8 Rx_Data[8];

RX_Struct_t RX_Header;

void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	CAN_voidReceiveMailBox(0, &RX_Header, Rx_Data);
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <USB_LP_CAN_RX0_IRQHandler+0x14>)
 8000b12:	4904      	ldr	r1, [pc, #16]	; (8000b24 <USB_LP_CAN_RX0_IRQHandler+0x18>)
 8000b14:	2000      	movs	r0, #0
 8000b16:	f7ff fd13 	bl	8000540 <CAN_voidReceiveMailBox>
	asm("NOP");
 8000b1a:	bf00      	nop
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000003c 	.word	0x2000003c
 8000b24:	20000044 	.word	0x20000044

08000b28 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	CAN_voidReceiveMailBox(1, &RX_Header, Rx_Data);
 8000b2c:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <CAN_RX1_IRQHandler+0x14>)
 8000b2e:	4904      	ldr	r1, [pc, #16]	; (8000b40 <CAN_RX1_IRQHandler+0x18>)
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fd05 	bl	8000540 <CAN_voidReceiveMailBox>
	asm("NOP");
 8000b36:	bf00      	nop
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000003c 	.word	0x2000003c
 8000b40:	20000044 	.word	0x20000044

08000b44 <main>:

int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af04      	add	r7, sp, #16
	 * 4- configure the filters to be used
	 * 5- enable the needed interrupt
	 * 6- transmit the data
	 */

	MRCC_voidInit();
 8000b4a:	f7ff fe93 	bl	8000874 <MRCC_voidInit>
	MRCC_voidSetPeripheralClock(RCC_GPIOA, RCC_STATUS_ON);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2102      	movs	r1, #2
 8000b52:	200b      	movs	r0, #11
 8000b54:	f7ff ff6a 	bl	8000a2c <MRCC_voidSetPeripheralClock>
	MRCC_voidSetPeripheralClock(RCC_CAN, RCC_STATUS_ON);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2119      	movs	r1, #25
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f7ff ff65 	bl	8000a2c <MRCC_voidSetPeripheralClock>

	MGPIO_voidSetPinDirection(GPIO_PORTA, 11, GPIO_MODE_INPUT,
 8000b62:	2305      	movs	r3, #5
 8000b64:	2200      	movs	r2, #0
 8000b66:	210b      	movs	r1, #11
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fdb9 	bl	80006e0 <MGPIO_voidSetPinDirection>
			GPIO_INPUT_CNFG_FLOATING); // CAN RX A11
	MGPIO_voidSetPinDirection(GPIO_PORTA, 12, GPIO_MODE_OUTPUT_2_MHZ,
 8000b6e:	2302      	movs	r3, #2
 8000b70:	2202      	movs	r2, #2
 8000b72:	210c      	movs	r1, #12
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fdb3 	bl	80006e0 <MGPIO_voidSetPinDirection>
			GPIO_OUTPUT_CNFG_ALT_PP); // CAN TX A12

//	NVIC_CAN_RX1
//	NVIC_USB_LP_CAN_RX0
	MNVIC_voidEnableInterrupt(NVIC_USB_LP_CAN_RX0);
 8000b7a:	2014      	movs	r0, #20
 8000b7c:	f7ff fe62 	bl	8000844 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(NVIC_CAN_RX1);
 8000b80:	2015      	movs	r0, #21
 8000b82:	f7ff fe5f 	bl	8000844 <MNVIC_voidEnableInterrupt>

	CAN_voidInit();
 8000b86:	f7ff fb8f 	bl	80002a8 <CAN_voidInit>

	// the value with which the comparison will happen according to the mask
	u32 ID = CAN_u32GetProperFilterValues(0x100, 0x525, 0, 0);
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f240 5125 	movw	r1, #1317	; 0x525
 8000b92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b96:	f7ff fb67 	bl	8000268 <CAN_u32GetProperFilterValues>
 8000b9a:	60f8      	str	r0, [r7, #12]

	// the mask value
	u32 ID2_MASK = CAN_u32GetProperFilterValues(0x1F0, 0xFFF, 0, 0);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000ba4:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 8000ba8:	f7ff fb5e 	bl	8000268 <CAN_u32GetProperFilterValues>
 8000bac:	60b8      	str	r0, [r7, #8]

	u32 ID_tx = CAN_u32GetProperFilterValues(0x105, 0x525, 0, 0);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f240 5125 	movw	r1, #1317	; 0x525
 8000bb6:	f240 1005 	movw	r0, #261	; 0x105
 8000bba:	f7ff fb55 	bl	8000268 <CAN_u32GetProperFilterValues>
 8000bbe:	6078      	str	r0, [r7, #4]

	CAN_voidFilterConfiguration(10, CAN_FILTER_MODE_IDENTIFIER_MASK_MODE,
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f7ff facc 	bl	8000170 <CAN_voidFilterConfiguration>
			CAN_FILTER_SCALE_SINGLE_32_BIT, CAN_FILTER_ASSIGNMENT_FIFO_0,
			ID, ID2_MASK, CAN_STATUS_ENABLE);

	CAN_voidInterruptStatus(CAN_EVENT_FIFO_0_PENDING, CAN_STATUS_ENABLE);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fc1a 	bl	8000414 <CAN_voidInterruptStatus>
	//CAN_voidInterruptStatus(CAN_EVENT_FIFO_1_PENDING, CAN_STATUS_ENABLE);

	CAN_TransmitMailBox(0, 8, Tx_Data, ID_tx, CAN_ID_STANDARD, CAN_DATA_FRAME);
 8000be0:	2300      	movs	r3, #0
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <main+0xb4>)
 8000bec:	2108      	movs	r1, #8
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fc30 	bl	8000454 <CAN_TransmitMailBox>

	while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <main+0xb0>
 8000bf6:	bf00      	nop
 8000bf8:	20000000 	.word	0x20000000

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 f811 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff ff89 	bl	8000b44 <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000c40:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000c44:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000c48:	20000050 	.word	0x20000050

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2500      	movs	r5, #0
 8000c54:	4e0c      	ldr	r6, [pc, #48]	; (8000c88 <__libc_init_array+0x38>)
 8000c56:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c58:	1ba4      	subs	r4, r4, r6
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	42a5      	cmp	r5, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	f000 f81a 	bl	8000c98 <_init>
 8000c64:	2500      	movs	r5, #0
 8000c66:	4e0a      	ldr	r6, [pc, #40]	; (8000c90 <__libc_init_array+0x40>)
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <__libc_init_array+0x44>)
 8000c6a:	1ba4      	subs	r4, r4, r6
 8000c6c:	10a4      	asrs	r4, r4, #2
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c78:	4798      	blx	r3
 8000c7a:	3501      	adds	r5, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c82:	4798      	blx	r3
 8000c84:	3501      	adds	r5, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cb0 	.word	0x08000cb0
 8000c8c:	08000cb0 	.word	0x08000cb0
 8000c90:	08000cb0 	.word	0x08000cb0
 8000c94:	08000cb4 	.word	0x08000cb4

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
