
FPEC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000934  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a64  08000a64  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a64  08000a64  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08000a64  08000a64  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a64  08000a64  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a64  08000a64  00010a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a68  08000a68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000040  08000aac  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000aac  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001367  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000067b  00000000  00000000  000213d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000210  00000000  00000000  00021a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  00021c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010cd  00000000  00000000  00021e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a2e  00000000  00000000  00022ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004f55  00000000  00000000  00023903  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00028858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f4  00000000  00000000  000288d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000040 	.word	0x20000040
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a4c 	.word	0x08000a4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000044 	.word	0x20000044
 800016c:	08000a4c 	.word	0x08000a4c

08000170 <FLASH_voidControlAccess>:
#include "../Inc/MCAL/FPEC/FPEC_interface.h"
#include "../Inc/MCAL/FPEC/FPEC_private.h"
#include "../Inc/MCAL/FPEC/FPEC_configuration.h"

void FLASH_voidControlAccess(FLASH_CONTROL_STATUS_t status)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	switch (status)
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <FLASH_voidControlAccess+0x16>
 8000180:	2b01      	cmp	r3, #1
 8000182:	d007      	beq.n	8000194 <FLASH_voidControlAccess+0x24>
			FPEC->FLASH_KEYR = FLASH_KEY1;
			FPEC->FLASH_KEYR = FLASH_KEY2;
			break;

	}
}
 8000184:	e00d      	b.n	80001a2 <FLASH_voidControlAccess+0x32>
			SET_BIT(FPEC->FLASH_CR, LOCK_BIT);
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <FLASH_voidControlAccess+0x3c>)
 8000188:	691b      	ldr	r3, [r3, #16]
 800018a:	4a08      	ldr	r2, [pc, #32]	; (80001ac <FLASH_voidControlAccess+0x3c>)
 800018c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000190:	6113      	str	r3, [r2, #16]
			break;
 8000192:	e006      	b.n	80001a2 <FLASH_voidControlAccess+0x32>
			FPEC->FLASH_KEYR = FLASH_KEY1;
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <FLASH_voidControlAccess+0x3c>)
 8000196:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <FLASH_voidControlAccess+0x40>)
 8000198:	605a      	str	r2, [r3, #4]
			FPEC->FLASH_KEYR = FLASH_KEY2;
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <FLASH_voidControlAccess+0x3c>)
 800019c:	4a05      	ldr	r2, [pc, #20]	; (80001b4 <FLASH_voidControlAccess+0x44>)
 800019e:	605a      	str	r2, [r3, #4]
			break;
 80001a0:	bf00      	nop
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40022000 	.word	0x40022000
 80001b0:	45670123 	.word	0x45670123
 80001b4:	cdef89ab 	.word	0xcdef89ab

080001b8 <FLASH_voidOptByteAccess>:

void FLASH_voidOptByteAccess(FLASH_CONTROL_STATUS_t status)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
	switch (status)
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d002      	beq.n	80001ce <FLASH_voidOptByteAccess+0x16>
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d007      	beq.n	80001dc <FLASH_voidOptByteAccess+0x24>
			FPEC->FLASH_OPTKEYR = FLASH_KEY1;
			FPEC->FLASH_OPTKEYR = FLASH_KEY2;
			break;

	}
}
 80001cc:	e00d      	b.n	80001ea <FLASH_voidOptByteAccess+0x32>
			CLR_BIT(FPEC->FLASH_CR, OPT_WRE);
 80001ce:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <FLASH_voidOptByteAccess+0x3c>)
 80001d0:	691b      	ldr	r3, [r3, #16]
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <FLASH_voidOptByteAccess+0x3c>)
 80001d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80001d8:	6113      	str	r3, [r2, #16]
			break;
 80001da:	e006      	b.n	80001ea <FLASH_voidOptByteAccess+0x32>
			FPEC->FLASH_OPTKEYR = FLASH_KEY1;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <FLASH_voidOptByteAccess+0x3c>)
 80001de:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <FLASH_voidOptByteAccess+0x40>)
 80001e0:	609a      	str	r2, [r3, #8]
			FPEC->FLASH_OPTKEYR = FLASH_KEY2;
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <FLASH_voidOptByteAccess+0x3c>)
 80001e4:	4a05      	ldr	r2, [pc, #20]	; (80001fc <FLASH_voidOptByteAccess+0x44>)
 80001e6:	609a      	str	r2, [r3, #8]
			break;
 80001e8:	bf00      	nop
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40022000 	.word	0x40022000
 80001f8:	45670123 	.word	0x45670123
 80001fc:	cdef89ab 	.word	0xcdef89ab

08000200 <FLASH_voidPageErase>:

void FLASH_voidPageErase(u8 PageIndex)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]

	// unlock access to the control register and FPEC
	FLASH_voidControlAccess(FLASH_UNLOCKED);
 800020a:	2001      	movs	r0, #1
 800020c:	f7ff ffb0 	bl	8000170 <FLASH_voidControlAccess>

	// wait for any ongoing operation
	while (GET_BIT(FPEC ->FLASH_SR, BUSY_FLAG));
 8000210:	bf00      	nop
 8000212:	4b19      	ldr	r3, [pc, #100]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000214:	68db      	ldr	r3, [r3, #12]
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d1f9      	bne.n	8000212 <FLASH_voidPageErase+0x12>

	// choose the next operation to be page erase
	SET_BIT(FPEC->FLASH_CR, PAGE_ERASE);
 800021e:	4b16      	ldr	r3, [pc, #88]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000220:	691b      	ldr	r3, [r3, #16]
 8000222:	4a15      	ldr	r2, [pc, #84]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	6113      	str	r3, [r2, #16]

	// specify the page address to be erased
	// 0x400 == 1024
	FPEC->FLASH_AR = FLASH_MAIN_MEM_START + PageIndex * 0x400;
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000230:	029a      	lsls	r2, r3, #10
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000234:	615a      	str	r2, [r3, #20]

	// start the erase operation
	// cleared by HW  when BSY flag is reset
	SET_BIT(FPEC->FLASH_CR, START_BIT);
 8000236:	4b10      	ldr	r3, [pc, #64]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000238:	691b      	ldr	r3, [r3, #16]
 800023a:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <FLASH_voidPageErase+0x78>)
 800023c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000240:	6113      	str	r3, [r2, #16]

	// wait for any ongoing operation
	while (GET_BIT(FPEC ->FLASH_SR, BUSY_FLAG));
 8000242:	bf00      	nop
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1f9      	bne.n	8000244 <FLASH_voidPageErase+0x44>

	// clear the End of Operation Flag
	SET_BIT(FPEC->FLASH_SR, EOP_FLAG);// cleared by writing 1
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	60d3      	str	r3, [r2, #12]

	// remove the choosing of erasing a page
	// to avoid any conflict with upcoming operation
	CLR_BIT(FPEC->FLASH_CR, PAGE_ERASE);
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <FLASH_voidPageErase+0x78>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <FLASH_voidPageErase+0x78>)
 8000262:	f023 0302 	bic.w	r3, r3, #2
 8000266:	6113      	str	r3, [r2, #16]

	// lock access to the control register and FPEC
	FLASH_voidControlAccess(FLASH_LOCKED);
 8000268:	2000      	movs	r0, #0
 800026a:	f7ff ff81 	bl	8000170 <FLASH_voidControlAccess>

}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40022000 	.word	0x40022000

0800027c <FLASH_voidPageProgram>:

void FLASH_voidPageProgram(u32 address, u16 *data, u16 DataLength)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	80fb      	strh	r3, [r7, #6]
	// unlock access to the control register and FPEC
	FLASH_voidControlAccess(FLASH_UNLOCKED);
 800028a:	2001      	movs	r0, #1
 800028c:	f7ff ff70 	bl	8000170 <FLASH_voidControlAccess>

	// wait for any ongoing operation
	while (GET_BIT(FPEC ->FLASH_SR, BUSY_FLAG));
 8000290:	bf00      	nop
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1f9      	bne.n	8000292 <FLASH_voidPageProgram+0x16>

	// choose the next operation to be page erase
	SET_BIT(FPEC->FLASH_CR, PAGE_PROGRAM);
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 80002a0:	691b      	ldr	r3, [r3, #16]
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6113      	str	r3, [r2, #16]

	// specify the page address to be programmed
	//FPEC->FLASH_AR = address;

	for (int i = 0; i < DataLength; i++)
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	e019      	b.n	80002e4 <FLASH_voidPageProgram+0x68>
	{
		// Flash must be written as HalfWord only
		*((u16*) address) = data[i];
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	68ba      	ldr	r2, [r7, #8]
 80002b6:	441a      	add	r2, r3
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	8812      	ldrh	r2, [r2, #0]
 80002bc:	801a      	strh	r2, [r3, #0]
		address += 2; // next half word address
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	3302      	adds	r3, #2
 80002c2:	60fb      	str	r3, [r7, #12]

		// wait for any ongoing operation
		while (GET_BIT(FPEC ->FLASH_SR, BUSY_FLAG));
 80002c4:	bf00      	nop
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1f9      	bne.n	80002c6 <FLASH_voidPageProgram+0x4a>

		// clear the End of Operation Flag
		SET_BIT(FPEC->FLASH_SR, EOP_FLAG);	// cleared by writing 1
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 80002d8:	f043 0320 	orr.w	r3, r3, #32
 80002dc:	60d3      	str	r3, [r2, #12]
	for (int i = 0; i < DataLength; i++)
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	88fb      	ldrh	r3, [r7, #6]
 80002e6:	697a      	ldr	r2, [r7, #20]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbe1      	blt.n	80002b0 <FLASH_voidPageProgram+0x34>

	}

	// remove the choosing of erasing a page
	// to avoid any conflict with upcoming operation
	CLR_BIT(FPEC->FLASH_CR, PAGE_PROGRAM);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <FLASH_voidPageProgram+0x8c>)
 80002f2:	f023 0301 	bic.w	r3, r3, #1
 80002f6:	6113      	str	r3, [r2, #16]

	// lock access to the control register and FPEC
	FLASH_voidControlAccess(FLASH_LOCKED);
 80002f8:	2000      	movs	r0, #0
 80002fa:	f7ff ff39 	bl	8000170 <FLASH_voidControlAccess>
}
 80002fe:	bf00      	nop
 8000300:	3718      	adds	r7, #24
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40022000 	.word	0x40022000

0800030c <FLASH_voidWriteDataOptionByte>:
	// lock access to the control register and FPEC
	FLASH_voidControlAccess(FLASH_LOCKED);
}

void FLASH_voidWriteDataOptionByte(FLASH_OPTION_BYTES_t option_byte, u8 value)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]

	// wait for any ongoing operation
	while (GET_BIT(FPEC ->FLASH_SR, BUSY_FLAG));
 800031c:	bf00      	nop
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1f9      	bne.n	800031e <FLASH_voidWriteDataOptionByte+0x12>

	// unlock access to the control register and FPEC
	FLASH_voidControlAccess(FLASH_UNLOCKED);
 800032a:	2001      	movs	r0, #1
 800032c:	f7ff ff20 	bl	8000170 <FLASH_voidControlAccess>
	// unlock access to the option bytes
	FLASH_voidOptByteAccess(FLASH_UNLOCKED);
 8000330:	2001      	movs	r0, #1
 8000332:	f7ff ff41 	bl	80001b8 <FLASH_voidOptByteAccess>

	while (GET_BIT(FPEC ->FLASH_CR, OPT_WRE) == 0);
 8000336:	bf00      	nop
 8000338:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	0a5b      	lsrs	r3, r3, #9
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <FLASH_voidWriteDataOptionByte+0x2c>

	// choose the next operation to be option byte erase
	SET_BIT(FPEC->FLASH_CR, OPT_BYTE_ERASE);
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	4a27      	ldr	r2, [pc, #156]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 800034c:	f043 0320 	orr.w	r3, r3, #32
 8000350:	6113      	str	r3, [r2, #16]

	// start the erase operation
	// cleared by HW  when BSY flag is reset
	SET_BIT(FPEC->FLASH_CR, START_BIT);
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 8000358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800035c:	6113      	str	r3, [r2, #16]

	// wait for any ongoing operation
	while (GET_BIT(FPEC ->FLASH_SR, BUSY_FLAG));
 800035e:	bf00      	nop
 8000360:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1f9      	bne.n	8000360 <FLASH_voidWriteDataOptionByte+0x54>

	// remove option byte erase
	// to avoid any conflict with upcoming operation
	CLR_BIT(FPEC->FLASH_CR, OPT_BYTE_ERASE);
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 8000372:	f023 0320 	bic.w	r3, r3, #32
 8000376:	6113      	str	r3, [r2, #16]

	// clear the End of Operation Flag
	SET_BIT(FPEC->FLASH_SR, EOP_FLAG);// cleared by writing 1
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	60d3      	str	r3, [r2, #12]

	// choose the next operation to be option byte program
	SET_BIT(FPEC->FLASH_CR, OPT_BYTE_PROGRAM);
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	4a17      	ldr	r2, [pc, #92]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6113      	str	r3, [r2, #16]

	*((u16*) FLASH_OPT_BYTES) = FLASH_RDPRT;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <FLASH_voidWriteDataOptionByte+0xe0>)
 8000392:	22a5      	movs	r2, #165	; 0xa5
 8000394:	801a      	strh	r2, [r3, #0]

	u32 byte_address = FLASH_OPT_BYTES + 2 * option_byte;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800039c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	60fb      	str	r3, [r7, #12]

	*((u16*) byte_address) = value;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	b292      	uxth	r2, r2
 80003aa:	801a      	strh	r2, [r3, #0]

	// wait for any ongoing operation
	while (GET_BIT(FPEC ->FLASH_SR, BUSY_FLAG));
 80003ac:	bf00      	nop
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d1f9      	bne.n	80003ae <FLASH_voidWriteDataOptionByte+0xa2>

	// remove option byte program
	// to avoid any conflict with upcoming operation
	CLR_BIT(FPEC->FLASH_CR, OPT_BYTE_PROGRAM);
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 80003c0:	f023 0310 	bic.w	r3, r3, #16
 80003c4:	6113      	str	r3, [r2, #16]

	// clear the End of Operation Flag
	SET_BIT(FPEC->FLASH_SR, EOP_FLAG);// cleared by writing 1
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <FLASH_voidWriteDataOptionByte+0xdc>)
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	60d3      	str	r3, [r2, #12]

	// lock access to the option bytes
	FLASH_voidOptByteAccess(FLASH_LOCKED);
 80003d2:	2000      	movs	r0, #0
 80003d4:	f7ff fef0 	bl	80001b8 <FLASH_voidOptByteAccess>

	// lock access to the control register and FPEC
	FLASH_voidControlAccess(FLASH_LOCKED);
 80003d8:	2000      	movs	r0, #0
 80003da:	f7ff fec9 	bl	8000170 <FLASH_voidControlAccess>
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40022000 	.word	0x40022000
 80003ec:	1ffff800 	.word	0x1ffff800

080003f0 <FLASH_u8ReadDataOptionByte>:

u8 FLASH_u8ReadDataOptionByte(FLASH_OPTION_BYTES_t option_byte)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]

	u16 value;

	u32 byte_address = FLASH_OPT_BYTES + 2 * option_byte;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8000400:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	60fb      	str	r3, [r7, #12]

	value = *((u16*) byte_address);
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	817b      	strh	r3, [r7, #10]

	return (u8) value;
 800040e:	897b      	ldrh	r3, [r7, #10]
 8000410:	b2db      	uxtb	r3, r3

}
 8000412:	4618      	mov	r0, r3
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <MGPIO_voidSetPinDirection>:



void MGPIO_voidSetPinDirection(GPIO_PORT copy_u8Port, u8 copy_u8Pin,
		GPIO_MODE copy_u8Mode, GPIO_CONFIGURATION copy_u8CNFG)
{
 800041c:	b490      	push	{r4, r7}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	4604      	mov	r4, r0
 8000424:	4608      	mov	r0, r1
 8000426:	4611      	mov	r1, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4623      	mov	r3, r4
 800042c:	71fb      	strb	r3, [r7, #7]
 800042e:	4603      	mov	r3, r0
 8000430:	71bb      	strb	r3, [r7, #6]
 8000432:	460b      	mov	r3, r1
 8000434:	717b      	strb	r3, [r7, #5]
 8000436:	4613      	mov	r3, r2
 8000438:	713b      	strb	r3, [r7, #4]
	u8 field = (copy_u8CNFG << 2) + copy_u8Mode;
 800043a:	793b      	ldrb	r3, [r7, #4]
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	b2da      	uxtb	r2, r3
 8000440:	797b      	ldrb	r3, [r7, #5]
 8000442:	4413      	add	r3, r2
 8000444:	73fb      	strb	r3, [r7, #15]
	if (copy_u8Pin < 8)
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	2b07      	cmp	r3, #7
 800044a:	d841      	bhi.n	80004d0 <MGPIO_voidSetPinDirection+0xb4>
	{
		switch (copy_u8Port)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d017      	beq.n	8000482 <MGPIO_voidSetPinDirection+0x66>
 8000452:	2b02      	cmp	r3, #2
 8000454:	d028      	beq.n	80004a8 <MGPIO_voidSetPinDirection+0x8c>
 8000456:	2b00      	cmp	r3, #0
 8000458:	d000      	beq.n	800045c <MGPIO_voidSetPinDirection+0x40>
						field);
				break;

		}
	}
}
 800045a:	e086      	b.n	800056a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 800045c:	4b45      	ldr	r3, [pc, #276]	; (8000574 <MGPIO_voidSetPinDirection+0x158>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	79ba      	ldrb	r2, [r7, #6]
 8000462:	0092      	lsls	r2, r2, #2
 8000464:	210f      	movs	r1, #15
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	43d2      	mvns	r2, r2
 800046c:	4013      	ands	r3, r2
 800046e:	7bf9      	ldrb	r1, [r7, #15]
 8000470:	79ba      	ldrb	r2, [r7, #6]
 8000472:	0092      	lsls	r2, r2, #2
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	4611      	mov	r1, r2
 800047a:	4a3e      	ldr	r2, [pc, #248]	; (8000574 <MGPIO_voidSetPinDirection+0x158>)
 800047c:	440b      	add	r3, r1
 800047e:	6013      	str	r3, [r2, #0]
				break;
 8000480:	e073      	b.n	800056a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 8000482:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <MGPIO_voidSetPinDirection+0x15c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	79ba      	ldrb	r2, [r7, #6]
 8000488:	0092      	lsls	r2, r2, #2
 800048a:	210f      	movs	r1, #15
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	43d2      	mvns	r2, r2
 8000492:	4013      	ands	r3, r2
 8000494:	7bf9      	ldrb	r1, [r7, #15]
 8000496:	79ba      	ldrb	r2, [r7, #6]
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a35      	ldr	r2, [pc, #212]	; (8000578 <MGPIO_voidSetPinDirection+0x15c>)
 80004a2:	440b      	add	r3, r1
 80004a4:	6013      	str	r3, [r2, #0]
				break;
 80004a6:	e060      	b.n	800056a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 80004a8:	4b34      	ldr	r3, [pc, #208]	; (800057c <MGPIO_voidSetPinDirection+0x160>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	79ba      	ldrb	r2, [r7, #6]
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	210f      	movs	r1, #15
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	4013      	ands	r3, r2
 80004ba:	7bf9      	ldrb	r1, [r7, #15]
 80004bc:	79ba      	ldrb	r2, [r7, #6]
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	4611      	mov	r1, r2
 80004c6:	4a2d      	ldr	r2, [pc, #180]	; (800057c <MGPIO_voidSetPinDirection+0x160>)
 80004c8:	440b      	add	r3, r1
 80004ca:	6013      	str	r3, [r2, #0]
				break;
 80004cc:	bf00      	nop
 80004ce:	e04c      	b.n	800056a <MGPIO_voidSetPinDirection+0x14e>
	else if (copy_u8Pin >= 8 && copy_u8Pin < 16)
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	2b07      	cmp	r3, #7
 80004d4:	d949      	bls.n	800056a <MGPIO_voidSetPinDirection+0x14e>
 80004d6:	79bb      	ldrb	r3, [r7, #6]
 80004d8:	2b0f      	cmp	r3, #15
 80004da:	d846      	bhi.n	800056a <MGPIO_voidSetPinDirection+0x14e>
		switch (copy_u8Port)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d019      	beq.n	8000516 <MGPIO_voidSetPinDirection+0xfa>
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d02c      	beq.n	8000540 <MGPIO_voidSetPinDirection+0x124>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d000      	beq.n	80004ec <MGPIO_voidSetPinDirection+0xd0>
}
 80004ea:	e03e      	b.n	800056a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MGPIO_voidSetPinDirection+0x158>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	79ba      	ldrb	r2, [r7, #6]
 80004f2:	3a08      	subs	r2, #8
 80004f4:	0092      	lsls	r2, r2, #2
 80004f6:	210f      	movs	r1, #15
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	4013      	ands	r3, r2
 8000500:	7bf9      	ldrb	r1, [r7, #15]
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	3a08      	subs	r2, #8
 8000506:	0092      	lsls	r2, r2, #2
 8000508:	fa01 f202 	lsl.w	r2, r1, r2
 800050c:	4611      	mov	r1, r2
 800050e:	4a19      	ldr	r2, [pc, #100]	; (8000574 <MGPIO_voidSetPinDirection+0x158>)
 8000510:	440b      	add	r3, r1
 8000512:	6053      	str	r3, [r2, #4]
				break;
 8000514:	e029      	b.n	800056a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MGPIO_voidSetPinDirection+0x15c>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	79ba      	ldrb	r2, [r7, #6]
 800051c:	3a08      	subs	r2, #8
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	210f      	movs	r1, #15
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	43d2      	mvns	r2, r2
 8000528:	4013      	ands	r3, r2
 800052a:	7bf9      	ldrb	r1, [r7, #15]
 800052c:	79ba      	ldrb	r2, [r7, #6]
 800052e:	3a08      	subs	r2, #8
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	fa01 f202 	lsl.w	r2, r1, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <MGPIO_voidSetPinDirection+0x15c>)
 800053a:	440b      	add	r3, r1
 800053c:	6053      	str	r3, [r2, #4]
				break;
 800053e:	e014      	b.n	800056a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MGPIO_voidSetPinDirection+0x160>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	79ba      	ldrb	r2, [r7, #6]
 8000546:	3a08      	subs	r2, #8
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	210f      	movs	r1, #15
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	43d2      	mvns	r2, r2
 8000552:	4013      	ands	r3, r2
 8000554:	7bf9      	ldrb	r1, [r7, #15]
 8000556:	79ba      	ldrb	r2, [r7, #6]
 8000558:	3a08      	subs	r2, #8
 800055a:	0092      	lsls	r2, r2, #2
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a06      	ldr	r2, [pc, #24]	; (800057c <MGPIO_voidSetPinDirection+0x160>)
 8000564:	440b      	add	r3, r1
 8000566:	6053      	str	r3, [r2, #4]
				break;
 8000568:	bf00      	nop
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bc90      	pop	{r4, r7}
 8000572:	4770      	bx	lr
 8000574:	40010800 	.word	0x40010800
 8000578:	40010c00 	.word	0x40010c00
 800057c:	40011000 	.word	0x40011000

08000580 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(GPIO_PORT copy_u8Port, u8 copy_u8Pin,
		GPIO_VALUE copy_u8Value)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	460b      	mov	r3, r1
 800058c:	71bb      	strb	r3, [r7, #6]
 800058e:	4613      	mov	r3, r2
 8000590:	717b      	strb	r3, [r7, #5]
	if (copy_u8Pin < 16)
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d83a      	bhi.n	800060e <MGPIO_voidSetPinValue+0x8e>
	{

		if (copy_u8Value == GPIO_HIGH)
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d11a      	bne.n	80005d4 <MGPIO_voidSetPinValue+0x54>
		{
			switch (copy_u8Port)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00a      	beq.n	80005ba <MGPIO_voidSetPinValue+0x3a>
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d00e      	beq.n	80005c6 <MGPIO_voidSetPinValue+0x46>
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <MGPIO_voidSetPinValue+0x2e>
			}

		}

	}
}
 80005ac:	e02f      	b.n	800060e <MGPIO_voidSetPinValue+0x8e>
					GPIOA->GPIO_BSRR = 1 << copy_u8Pin; // make advantage of atomic set
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	2201      	movs	r2, #1
 80005b2:	409a      	lsls	r2, r3
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <MGPIO_voidSetPinValue+0x98>)
 80005b6:	611a      	str	r2, [r3, #16]
					break;
 80005b8:	e029      	b.n	800060e <MGPIO_voidSetPinValue+0x8e>
					GPIOB->GPIO_BSRR = 1 << copy_u8Pin;
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	2201      	movs	r2, #1
 80005be:	409a      	lsls	r2, r3
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <MGPIO_voidSetPinValue+0x9c>)
 80005c2:	611a      	str	r2, [r3, #16]
					break;
 80005c4:	e023      	b.n	800060e <MGPIO_voidSetPinValue+0x8e>
					GPIOC->GPIO_BSRR = 1 << copy_u8Pin;
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	2201      	movs	r2, #1
 80005ca:	409a      	lsls	r2, r3
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MGPIO_voidSetPinValue+0xa0>)
 80005ce:	611a      	str	r2, [r3, #16]
					break;
 80005d0:	bf00      	nop
 80005d2:	e01c      	b.n	800060e <MGPIO_voidSetPinValue+0x8e>
		else if (copy_u8Value == GPIO_LOW)
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d119      	bne.n	800060e <MGPIO_voidSetPinValue+0x8e>
			switch (copy_u8Port)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00a      	beq.n	80005f6 <MGPIO_voidSetPinValue+0x76>
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d00e      	beq.n	8000602 <MGPIO_voidSetPinValue+0x82>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d000      	beq.n	80005ea <MGPIO_voidSetPinValue+0x6a>
}
 80005e8:	e011      	b.n	800060e <MGPIO_voidSetPinValue+0x8e>
					GPIOA->GPIO_BRR = 1 << copy_u8Pin; // make advantage of atomic clear
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2201      	movs	r2, #1
 80005ee:	409a      	lsls	r2, r3
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MGPIO_voidSetPinValue+0x98>)
 80005f2:	615a      	str	r2, [r3, #20]
					break;
 80005f4:	e00b      	b.n	800060e <MGPIO_voidSetPinValue+0x8e>
					GPIOB->GPIO_BRR = 1 << copy_u8Pin;
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	2201      	movs	r2, #1
 80005fa:	409a      	lsls	r2, r3
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <MGPIO_voidSetPinValue+0x9c>)
 80005fe:	615a      	str	r2, [r3, #20]
					break;
 8000600:	e005      	b.n	800060e <MGPIO_voidSetPinValue+0x8e>
					GPIOC->GPIO_BRR = 1 << copy_u8Pin;
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	2201      	movs	r2, #1
 8000606:	409a      	lsls	r2, r3
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MGPIO_voidSetPinValue+0xa0>)
 800060a:	615a      	str	r2, [r3, #20]
					break;
 800060c:	bf00      	nop
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40010800 	.word	0x40010800
 800061c:	40010c00 	.word	0x40010c00
 8000620:	40011000 	.word	0x40011000

08000624 <MNVIC_voidEnableInterrupt>:



/* to enable the interrupt */
void MNVIC_voidEnableInterrupt(u8 copy_ISRNumber)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_ISRNumber / 32] = 1 << (copy_ISRNumber % 32);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 031f 	and.w	r3, r3, #31
 8000634:	2201      	movs	r2, #1
 8000636:	fa02 f103 	lsl.w	r1, r2, r3
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <MNVIC_voidEnableInterrupt+0x2c>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100

08000654 <MRCC_voidInit>:
u32 RCC_AHB_Frequency;
u32 RCC_APB1_Frequency;
u32 RCC_APB2_Frequency;

void MRCC_voidInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	/* assign the system clock global variable*/
	RCC_F_CPU = RCC_SYSTEM_CLOCK;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <MRCC_voidInit+0x48>)
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <MRCC_voidInit+0x4c>)
 800065c:	601a      	str	r2, [r3, #0]

	/* assign the AHB frequency global variable*/
#if RCC_AHB_BUS_PRESCALER <=10
	RCC_AHB_Frequency = RCC_F_CPU >> (RCC_AHB_BUS_PRESCALER - 7);
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MRCC_voidInit+0x48>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <MRCC_voidInit+0x50>)
 8000664:	6013      	str	r3, [r2, #0]
#else
	RCC_AHB_Frequency = RCC_F_CPU>>(RCC_AHB_BUS_PRESCALER-7+1);
#endif

	/* assign the APB1 & APB2 frequency global variable */
	RCC_APB1_Frequency = RCC_F_CPU >> (RCC_APB1_BUS_PRESCALER - 3);
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MRCC_voidInit+0x48>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <MRCC_voidInit+0x54>)
 800066e:	6013      	str	r3, [r2, #0]
	RCC_APB2_Frequency = RCC_F_CPU >> (RCC_APB2_BUS_PRESCALER - 3);
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MRCC_voidInit+0x48>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	085b      	lsrs	r3, r3, #1
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <MRCC_voidInit+0x58>)
 8000678:	6013      	str	r3, [r2, #0]

	MRCC_voidSetBusClocks(RCC_AHB_BUS_PRESCALER, RCC_APB1_BUS_PRESCALER,
 800067a:	2204      	movs	r2, #4
 800067c:	2104      	movs	r1, #4
 800067e:	2007      	movs	r0, #7
 8000680:	f000 f898 	bl	80007b4 <MRCC_voidSetBusClocks>
	SET_BIT(RCC->RCC_CFGR, 16); //PLLSRC
	INS_FIELD(RCC->RCC_CFGR, 0x1111, 18, (RCC_PLL_MUL_FACTOR-2));

#endif

	MRCC_voidEnableClockSource(RCC_SYSTEM_CLOCK_SOURCE, RCC_STATUS_ON);
 8000684:	2101      	movs	r1, #1
 8000686:	2001      	movs	r0, #1
 8000688:	f000 f872 	bl	8000770 <MRCC_voidEnableClockSource>

	MRCC_u8CheckClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f80f 	bl	80006b0 <MRCC_u8CheckClockSource>

	MRCC_voidSetClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 8000692:	2001      	movs	r0, #1
 8000694:	f000 f840 	bl	8000718 <MRCC_voidSetClockSource>

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000064 	.word	0x20000064
 80006a0:	007a1200 	.word	0x007a1200
 80006a4:	2000006c 	.word	0x2000006c
 80006a8:	20000068 	.word	0x20000068
 80006ac:	20000070 	.word	0x20000070

080006b0 <MRCC_u8CheckClockSource>:

u8 MRCC_u8CheckClockSource(RCC_CLOCK_SOURCE copy_u8CLK)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	u32 max_wait_time = 50000;
 80006ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006be:	60fb      	str	r3, [r7, #12]
	u32 counter = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
	u8 state = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	74fb      	strb	r3, [r7, #19]

	if ((copy_u8CLK != RCC_HSI) && (copy_u8CLK != RCC_HSE)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d011      	beq.n	80006f2 <MRCC_u8CheckClockSource+0x42>
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b11      	cmp	r3, #17
 80006d2:	d00e      	beq.n	80006f2 <MRCC_u8CheckClockSource+0x42>
			&& (copy_u8CLK != RCC_PLL)) state = 0;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b19      	cmp	r3, #25
 80006d8:	d00b      	beq.n	80006f2 <MRCC_u8CheckClockSource+0x42>
 80006da:	2300      	movs	r3, #0
 80006dc:	74fb      	strb	r3, [r7, #19]
 80006de:	e013      	b.n	8000708 <MRCC_u8CheckClockSource+0x58>
	else
	{
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
		{
			counter++;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	3301      	adds	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
			state = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	74fb      	strb	r3, [r7, #19]
			if (counter == max_wait_time) break;
 80006ea:	697a      	ldr	r2, [r7, #20]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d009      	beq.n	8000706 <MRCC_u8CheckClockSource+0x56>
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MRCC_u8CheckClockSource+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	fa22 f303 	lsr.w	r3, r2, r3
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0ed      	beq.n	80006e0 <MRCC_u8CheckClockSource+0x30>
 8000704:	e000      	b.n	8000708 <MRCC_u8CheckClockSource+0x58>
			if (counter == max_wait_time) break;
 8000706:	bf00      	nop
		}
	}
	return state;
 8000708:	7cfb      	ldrb	r3, [r7, #19]
}
 800070a:	4618      	mov	r0, r3
 800070c:	371c      	adds	r7, #28
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000

08000718 <MRCC_voidSetClockSource>:

void MRCC_voidSetClockSource(RCC_CLOCK_SOURCE copy_u8Source)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Source)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b11      	cmp	r3, #17
 8000726:	d00b      	beq.n	8000740 <MRCC_voidSetClockSource+0x28>
 8000728:	2b19      	cmp	r3, #25
 800072a:	d011      	beq.n	8000750 <MRCC_voidSetClockSource+0x38>
 800072c:	2b01      	cmp	r3, #1
 800072e:	d000      	beq.n	8000732 <MRCC_voidSetClockSource+0x1a>
			break;
		case RCC_PLL:
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
			break;
	}
}
 8000730:	e016      	b.n	8000760 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 0);
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MRCC_voidSetClockSource+0x54>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <MRCC_voidSetClockSource+0x54>)
 8000738:	f023 0303 	bic.w	r3, r3, #3
 800073c:	6053      	str	r3, [r2, #4]
			break;
 800073e:	e00f      	b.n	8000760 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 1);
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MRCC_voidSetClockSource+0x54>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f023 0303 	bic.w	r3, r3, #3
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <MRCC_voidSetClockSource+0x54>)
 800074a:	3301      	adds	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
			break;
 800074e:	e007      	b.n	8000760 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MRCC_voidSetClockSource+0x54>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f023 0303 	bic.w	r3, r3, #3
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <MRCC_voidSetClockSource+0x54>)
 800075a:	3302      	adds	r3, #2
 800075c:	6053      	str	r3, [r2, #4]
			break;
 800075e:	bf00      	nop
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <MRCC_voidEnableClockSource>:

void MRCC_voidEnableClockSource(RCC_CLOCK_SOURCE copy_u8ClockSource,
		RCC_STATES copy_u8state)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	71bb      	strb	r3, [r7, #6]
	// the insert function offset value is determined with the bus variable
	// which is specified in the interface file
	INS_BIT(RCC->RCC_CR, (copy_u8ClockSource - 1), copy_u8state); // source_ON bit
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MRCC_voidEnableClockSource+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	3a01      	subs	r2, #1
 8000788:	2101      	movs	r1, #1
 800078a:	fa01 f202 	lsl.w	r2, r1, r2
 800078e:	43d2      	mvns	r2, r2
 8000790:	4013      	ands	r3, r2
 8000792:	79b9      	ldrb	r1, [r7, #6]
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	3a01      	subs	r2, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <MRCC_voidEnableClockSource+0x40>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <MRCC_voidSetBusClocks>:

void MRCC_voidSetBusClocks(RCC_AHB_PRESCALER copy_AHB,
		RCC_APB_PRESCALER copy_APB1, RCC_APB_PRESCALER copy_APB2)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	460b      	mov	r3, r1
 80007c0:	71bb      	strb	r3, [r7, #6]
 80007c2:	4613      	mov	r3, r2
 80007c4:	717b      	strb	r3, [r7, #5]
	// AHB prescaler is different 4-bits wide

	INS_FIELD(RCC->RCC_CFGR, 0b1111, 4, copy_AHB);
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MRCC_voidSetBusClocks+0x58>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <MRCC_voidSetBusClocks+0x58>)
 80007d6:	440b      	add	r3, r1
 80007d8:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 8, copy_APB1);
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MRCC_voidSetBusClocks+0x58>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	0212      	lsls	r2, r2, #8
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <MRCC_voidSetBusClocks+0x58>)
 80007ea:	440b      	add	r3, r1
 80007ec:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 11, copy_APB2);
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <MRCC_voidSetBusClocks+0x58>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80007f6:	797a      	ldrb	r2, [r7, #5]
 80007f8:	02d2      	lsls	r2, r2, #11
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <MRCC_voidSetBusClocks+0x58>)
 80007fe:	440b      	add	r3, r1
 8000800:	6053      	str	r3, [r2, #4]

}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <MRCC_voidSetPeripheralClock>:

void MRCC_voidSetPeripheralClock(RCC_BUS copy_u8Bus, u8 copy_u8PeripheralNum,
		RCC_STATES copy_periph_status)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	460b      	mov	r3, r1
 800081c:	71bb      	strb	r3, [r7, #6]
 800081e:	4613      	mov	r3, r2
 8000820:	717b      	strb	r3, [r7, #5]
	// dis/enable the desired peripheral on the specified bus
	// the insert function ofset value is determened with the bus variable
	// which is specified in the interface file
	if (copy_u8Bus == RCC_AHB_BUS)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d110      	bne.n	800084a <MRCC_voidSetPeripheralClock+0x3a>
	{
		INS_BIT(RCC->RCC_AHBENR, copy_u8PeripheralNum, copy_periph_status);
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MRCC_voidSetPeripheralClock+0x94>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	43d2      	mvns	r2, r2
 8000836:	4013      	ands	r3, r2
 8000838:	7979      	ldrb	r1, [r7, #5]
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	fa01 f202 	lsl.w	r2, r1, r2
 8000840:	4611      	mov	r1, r2
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MRCC_voidSetPeripheralClock+0x94>)
 8000844:	430b      	orrs	r3, r1
 8000846:	6153      	str	r3, [r2, #20]
	}
	else if (copy_u8Bus == RCC_APB2_BUS)
	{
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
	}
}
 8000848:	e026      	b.n	8000898 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB1_BUS)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b08      	cmp	r3, #8
 800084e:	d110      	bne.n	8000872 <MRCC_voidSetPeripheralClock+0x62>
		INS_BIT(RCC->RCC_APB1ENR, copy_u8PeripheralNum, copy_periph_status);
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MRCC_voidSetPeripheralClock+0x94>)
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	43d2      	mvns	r2, r2
 800085e:	4013      	ands	r3, r2
 8000860:	7979      	ldrb	r1, [r7, #5]
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <MRCC_voidSetPeripheralClock+0x94>)
 800086c:	430b      	orrs	r3, r1
 800086e:	61d3      	str	r3, [r2, #28]
}
 8000870:	e012      	b.n	8000898 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB2_BUS)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b0b      	cmp	r3, #11
 8000876:	d10f      	bne.n	8000898 <MRCC_voidSetPeripheralClock+0x88>
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MRCC_voidSetPeripheralClock+0x94>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	79ba      	ldrb	r2, [r7, #6]
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	43d2      	mvns	r2, r2
 8000886:	4013      	ands	r3, r2
 8000888:	7979      	ldrb	r1, [r7, #5]
 800088a:	79ba      	ldrb	r2, [r7, #6]
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	4611      	mov	r1, r2
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <MRCC_voidSetPeripheralClock+0x94>)
 8000894:	430b      	orrs	r3, r1
 8000896:	6193      	str	r3, [r2, #24]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	if (SYSTICK_ISR_TYPE_PERIODIC == 0)
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <SysTick_Handler+0x3c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <SysTick_Handler+0x30>
	{
		// disable systick
		CLR_BIT(SYSTICK->STK_CTRL, 0);
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <SysTick_Handler+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <SysTick_Handler+0x40>)
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]

		// disable Int
		CLR_BIT(SYSTICK->STK_CTRL, 1);
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <SysTick_Handler+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <SysTick_Handler+0x40>)
 80008c6:	f023 0302 	bic.w	r3, r3, #2
 80008ca:	6013      	str	r3, [r2, #0]

		// load value then clear current value
		SYSTICK->STK_LOAD = 0;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SysTick_Handler+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
		SYSTICK->STK_VAL = 0;
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Handler+0x40>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
	}

	SYSTICK_CALLBACK();
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Handler+0x44>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4798      	blx	r3

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000060 	.word	0x20000060
 80008e8:	e000e010 	.word	0xe000e010
 80008ec:	2000005c 	.word	0x2000005c

080008f0 <FLASH_IRQHandler>:
		{ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65 };
u16 data2[len] =
		{ 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48 };

void FLASH_IRQHandler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	asm("NOP");
 80008f4:	bf00      	nop
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
	...

08000900 <main>:

int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
	// must be HSI
	// prescaler for AHB must be 1
	MRCC_voidInit();
 8000906:	f7ff fea5 	bl	8000654 <MRCC_voidInit>

	MRCC_voidSetPeripheralClock(RCC_GPIOC, RCC_STATUS_ON);
 800090a:	2201      	movs	r2, #1
 800090c:	2104      	movs	r1, #4
 800090e:	200b      	movs	r0, #11
 8000910:	f7ff ff7e 	bl	8000810 <MRCC_voidSetPeripheralClock>
	MRCC_voidSetPeripheralClock(RCC_FLITF, RCC_STATUS_ON);
 8000914:	2201      	movs	r2, #1
 8000916:	2104      	movs	r1, #4
 8000918:	2004      	movs	r0, #4
 800091a:	f7ff ff79 	bl	8000810 <MRCC_voidSetPeripheralClock>

	MGPIO_voidSetPinDirection(GPIO_PORTC, 13, GPIO_MODE_OUTPUT_10_MHZ,
 800091e:	2300      	movs	r3, #0
 8000920:	2201      	movs	r2, #1
 8000922:	210d      	movs	r1, #13
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fd79 	bl	800041c <MGPIO_voidSetPinDirection>
			GPIO_OUTPUT_CNFG_GP_PP);

	// flash global interrupt
	MNVIC_voidEnableInterrupt(NVIC_FLASH);
 800092a:	2004      	movs	r0, #4
 800092c:	f7ff fe7a 	bl	8000624 <MNVIC_voidEnableInterrupt>

	// enable the interrupt when page error happen
	//FLASH_voidINTSTATUS(FLASH_EVENT_ERROR, FLASH_ENABLE);

	FLASH_voidPageErase(4);
 8000930:	2004      	movs	r0, #4
 8000932:	f7ff fc65 	bl	8000200 <FLASH_voidPageErase>
	//FLASH_voidPageErase(5);
	FLASH_voidPageProgram((0x08000000 + 0x400 * 4), data, len);
 8000936:	2210      	movs	r2, #16
 8000938:	4918      	ldr	r1, [pc, #96]	; (800099c <main+0x9c>)
 800093a:	4819      	ldr	r0, [pc, #100]	; (80009a0 <main+0xa0>)
 800093c:	f7ff fc9e 	bl	800027c <FLASH_voidPageProgram>
	FLASH_voidPageProgram((0x08000000 + 0x400 * 4 + 0x10), data2, len);
 8000940:	2210      	movs	r2, #16
 8000942:	4918      	ldr	r1, [pc, #96]	; (80009a4 <main+0xa4>)
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <main+0xa8>)
 8000946:	f7ff fc99 	bl	800027c <FLASH_voidPageProgram>

	FLASH_voidWriteDataOptionByte(FLASH_OPT_BYTE_DATA_1, 0xDD);
 800094a:	21dd      	movs	r1, #221	; 0xdd
 800094c:	2003      	movs	r0, #3
 800094e:	f7ff fcdd 	bl	800030c <FLASH_voidWriteDataOptionByte>

	// still not working
	u8 dumb = FLASH_u8ReadDataOptionByte(FLASH_OPT_BYTE_DATA_1);
 8000952:	2003      	movs	r0, #3
 8000954:	f7ff fd4c 	bl	80003f0 <FLASH_u8ReadDataOptionByte>
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]

	while (1)
	{
		MGPIO_voidSetPinValue(GPIO_PORTC, 13, GPIO_HIGH);
 800095c:	2201      	movs	r2, #1
 800095e:	210d      	movs	r1, #13
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff fe0d 	bl	8000580 <MGPIO_voidSetPinValue>
		for (int i = 0; i < 1000000; i++);
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	e002      	b.n	8000972 <main+0x72>
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <main+0xac>)
 8000976:	4293      	cmp	r3, r2
 8000978:	ddf8      	ble.n	800096c <main+0x6c>
		MGPIO_voidSetPinValue(GPIO_PORTC, 13, GPIO_LOW);
 800097a:	2200      	movs	r2, #0
 800097c:	210d      	movs	r1, #13
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff fdfe 	bl	8000580 <MGPIO_voidSetPinValue>
		for (int i = 0; i < 1000000; i++);
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	e002      	b.n	8000990 <main+0x90>
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	3301      	adds	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <main+0xac>)
 8000994:	4293      	cmp	r3, r2
 8000996:	ddf8      	ble.n	800098a <main+0x8a>
		MGPIO_voidSetPinValue(GPIO_PORTC, 13, GPIO_HIGH);
 8000998:	e7e0      	b.n	800095c <main+0x5c>
 800099a:	bf00      	nop
 800099c:	20000000 	.word	0x20000000
 80009a0:	08001000 	.word	0x08001000
 80009a4:	20000020 	.word	0x20000020
 80009a8:	08001010 	.word	0x08001010
 80009ac:	000f423f 	.word	0x000f423f

080009b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009de:	f000 f811 	bl	8000a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff ff8d 	bl	8000900 <main>

080009e6 <LoopForever>:

LoopForever:
    b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   r0, =_estack
 80009e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80009f4:	08000a6c 	.word	0x08000a6c
  ldr r2, =_sbss
 80009f8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80009fc:	20000074 	.word	0x20000074

08000a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_2_IRQHandler>
	...

08000a04 <__libc_init_array>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	2500      	movs	r5, #0
 8000a08:	4e0c      	ldr	r6, [pc, #48]	; (8000a3c <__libc_init_array+0x38>)
 8000a0a:	4c0d      	ldr	r4, [pc, #52]	; (8000a40 <__libc_init_array+0x3c>)
 8000a0c:	1ba4      	subs	r4, r4, r6
 8000a0e:	10a4      	asrs	r4, r4, #2
 8000a10:	42a5      	cmp	r5, r4
 8000a12:	d109      	bne.n	8000a28 <__libc_init_array+0x24>
 8000a14:	f000 f81a 	bl	8000a4c <_init>
 8000a18:	2500      	movs	r5, #0
 8000a1a:	4e0a      	ldr	r6, [pc, #40]	; (8000a44 <__libc_init_array+0x40>)
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <__libc_init_array+0x44>)
 8000a1e:	1ba4      	subs	r4, r4, r6
 8000a20:	10a4      	asrs	r4, r4, #2
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	d105      	bne.n	8000a32 <__libc_init_array+0x2e>
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a2c:	4798      	blx	r3
 8000a2e:	3501      	adds	r5, #1
 8000a30:	e7ee      	b.n	8000a10 <__libc_init_array+0xc>
 8000a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a36:	4798      	blx	r3
 8000a38:	3501      	adds	r5, #1
 8000a3a:	e7f2      	b.n	8000a22 <__libc_init_array+0x1e>
 8000a3c:	08000a64 	.word	0x08000a64
 8000a40:	08000a64 	.word	0x08000a64
 8000a44:	08000a64 	.word	0x08000a64
 8000a48:	08000a68 	.word	0x08000a68

08000a4c <_init>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr

08000a58 <_fini>:
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	bf00      	nop
 8000a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5e:	bc08      	pop	{r3}
 8000a60:	469e      	mov	lr, r3
 8000a62:	4770      	bx	lr
